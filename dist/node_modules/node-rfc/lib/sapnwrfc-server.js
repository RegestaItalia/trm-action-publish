"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const noderfc_bindings_1 = require("./noderfc-bindings");
class Server {
    __server;
    constructor(serverConfiguration) {
        this.__server = new noderfc_bindings_1.noderfc_binding.Server({
            serverConnection: serverConfiguration.serverConnection,
            clientConnection: serverConfiguration.clientConnection,
            serverOptions: serverConfiguration.serverOptions || {},
        });
    }
    start(callback) {
        if (typeof callback === "function") {
            return this.__server.start(callback);
        }
        return new Promise((resolve, reject) => {
            this.__server.start((err) => {
                if (err === undefined) {
                    resolve();
                }
                else {
                    reject(err);
                }
            });
        });
    }
    stop(callback) {
        if (typeof callback === "function") {
            return this.__server.stop(callback);
        }
        return new Promise((resolve, reject) => {
            this.__server.stop((err) => {
                if (err === undefined) {
                    resolve();
                }
                else {
                    reject(err);
                }
            });
        });
    }
    addFunction(abapFunctionName, jsFunction, callback) {
        if (typeof callback === "function") {
            return this.__server.addFunction(abapFunctionName, jsFunction, callback);
        }
        return new Promise((resolve, reject) => {
            this.__server.addFunction(abapFunctionName, jsFunction, (err) => {
                if (err === undefined) {
                    resolve();
                }
                else {
                    reject(err);
                }
            });
        });
    }
    removeFunction(abapFunctionName, callback) {
        if (typeof callback === "function") {
            return this.__server.removeFunction(abapFunctionName, callback);
        }
        return new Promise((resolve, reject) => {
            this.__server.removeFunction(abapFunctionName, (err) => {
                if (err === undefined) {
                    resolve();
                }
                else {
                    reject(err);
                }
            });
        });
    }
    getFunctionDescription(rfmName, callback) {
        if (typeof callback === "function") {
            return this.__server.getFunctionDescription(rfmName, callback);
        }
        return new Promise((resolve, reject) => {
            this.__server.getFunctionDescription(rfmName, (err, rfmFunctionDescription) => {
                if (err === undefined) {
                    resolve(rfmFunctionDescription);
                }
                else {
                    reject(err);
                }
            });
        });
    }
    static get environment() {
        return noderfc_bindings_1.environment;
    }
    get environment() {
        return noderfc_bindings_1.environment;
    }
    get binding() {
        return this.__server;
    }
    get id() {
        return this.__server._id;
    }
    get alive() {
        return this.__server._alive;
    }
    get server_connection() {
        return this.__server._server_conn_handle;
    }
    get client_connection() {
        return this.__server._client_conn_handle;
    }
}
exports.Server = Server;
