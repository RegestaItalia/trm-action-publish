"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const commons_1 = require("../commons");
const loading_cli_1 = __importDefault(require("loading-cli"));
const cliTable = __importStar(require("cli-table3"));
const TraceLevel_1 = require("./TraceLevel");
const trm_registry_types_1 = require("trm-registry-types");
class Logger {
    constructor(coreEnv, traceLevel) {
        this.coreEnv = coreEnv;
        this.traceLevel = traceLevel;
        if (this.coreEnv === commons_1.CoreEnv.CLI) {
            this.cliObj = (0, loading_cli_1.default)({
                frames: ["⊶", "⊷"],
                interval: 1000
            });
        }
    }
    loading(text) {
        if (this.coreEnv === commons_1.CoreEnv.CLI) {
            this.loader = this.cliObj.render().start(text);
        }
        if (this.coreEnv === commons_1.CoreEnv.JSON) {
            const log = {
                type: "loading",
                text
            };
            console.log(JSON.stringify(log));
        }
    }
    success(text) {
        const aText = text.split('\n');
        aText.forEach(s => {
            if (this.coreEnv === commons_1.CoreEnv.CLI) {
                if (this.loader) {
                    this.loader.succeed(s);
                    this.loader = null;
                }
                else {
                    this.cliObj.succeed(s);
                }
            }
            if (this.coreEnv === commons_1.CoreEnv.JSON) {
                const log = {
                    type: "success",
                    text: s
                };
                console.log(JSON.stringify(log));
            }
        });
    }
    error(text) {
        const aText = text.split('\n');
        aText.forEach(s => {
            if (this.coreEnv === commons_1.CoreEnv.CLI) {
                if (this.loader) {
                    this.loader.fail(s);
                    this.loader = null;
                }
                else {
                    this.cliObj.fail(s);
                }
            }
            if (this.coreEnv === commons_1.CoreEnv.JSON) {
                const log = {
                    type: "error",
                    text: s
                };
                console.log(JSON.stringify(log));
            }
        });
    }
    warning(text) {
        const aText = text.split('\n');
        aText.forEach(s => {
            if (this.coreEnv === commons_1.CoreEnv.CLI) {
                if (this.loader) {
                    this.loader.warn(s);
                    this.loader = null;
                }
                else {
                    this.cliObj.warn(s);
                }
            }
            if (this.coreEnv === commons_1.CoreEnv.JSON) {
                const log = {
                    type: "warning",
                    text: s
                };
                console.log(JSON.stringify(log));
            }
        });
    }
    info(text) {
        const aText = text.split('\n');
        aText.forEach(s => {
            if (this.coreEnv === commons_1.CoreEnv.CLI) {
                if (this.loader) {
                    this.loader.info(s);
                    this.loader = null;
                }
                else {
                    this.cliObj.info(s);
                }
            }
            if (this.coreEnv === commons_1.CoreEnv.JSON) {
                const log = {
                    type: "info",
                    text: s
                };
                console.log(JSON.stringify(log));
            }
        });
    }
    log(text) {
        const aText = text.split('\n');
        aText.forEach(s => {
            if (this.coreEnv === commons_1.CoreEnv.CLI) {
                if (this.loader) {
                    this.cliObj.stop();
                }
                console.log(s);
            }
            if (this.coreEnv === commons_1.CoreEnv.JSON) {
                const log = {
                    type: "log",
                    text: s
                };
                console.log(JSON.stringify(log));
            }
        });
    }
    table(header, data) {
        if (this.coreEnv === commons_1.CoreEnv.CLI) {
            var table = new cliTable.default({
                head: header,
            });
            data.forEach(arr => {
                table.push(arr);
            });
            console.log(table.toString());
        }
        if (this.coreEnv === commons_1.CoreEnv.JSON) {
            const log = {
                type: "error",
                text: JSON.stringify({ header, data })
            };
            console.log(JSON.stringify(log));
        }
    }
    registryResponse(response) {
        if (response.type === trm_registry_types_1.MessageType.ERROR) {
            this.error(response.text);
        }
        if (response.type === trm_registry_types_1.MessageType.INFO) {
            this.info(response.text);
        }
        if (response.type === trm_registry_types_1.MessageType.WARNING) {
            this.warning(response.text);
        }
    }
    forceStop() {
        try {
            this.cliObj.stop();
        }
        catch (e) { }
    }
    static getDummy() {
        return new Logger(commons_1.CoreEnv.DUMMY, TraceLevel_1.TraceLevel.TRACE_ALL);
    }
}
exports.Logger = Logger;
