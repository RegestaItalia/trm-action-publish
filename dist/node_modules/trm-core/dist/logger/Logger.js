"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.inspect = void 0;
const DummyLogger_1 = require("./DummyLogger");
const util_1 = require("util");
function inspect(object, options) {
    var sInspect = (0, util_1.inspect)(object, options);
    sInspect = sInspect.replace(/_authData:\s*{\s*.*?\s*}/gmi, '_authData: HIDDEN');
    sInspect = sInspect.replace(/_login:\s*{\s*.*?\s*}/gmi, '_login: HIDDEN');
    return sInspect;
}
exports.inspect = inspect;
var Logger;
(function (Logger) {
    Logger.logger = new DummyLogger_1.DummyLogger();
    function checkLogger() {
        if (!Logger.logger) {
            throw new Error('Logger not initialized.');
        }
    }
    function loading(text, debug) {
        checkLogger();
        return Logger.logger.loading(text, debug);
    }
    Logger.loading = loading;
    function success(text, debug) {
        checkLogger();
        return Logger.logger.success(text, debug);
    }
    Logger.success = success;
    function error(text, debug) {
        checkLogger();
        return Logger.logger.error(text, debug);
    }
    Logger.error = error;
    function warning(text, debug) {
        checkLogger();
        return Logger.logger.warning(text, debug);
    }
    Logger.warning = warning;
    function info(text, debug) {
        checkLogger();
        return Logger.logger.info(text, debug);
    }
    Logger.info = info;
    function log(text, debug) {
        checkLogger();
        return Logger.logger.log(text, debug);
    }
    Logger.log = log;
    function table(header, data, debug) {
        checkLogger();
        return Logger.logger.table(header, data, debug);
    }
    Logger.table = table;
    function registryResponse(response, debug) {
        checkLogger();
        return Logger.logger.registryResponse(response, debug);
    }
    Logger.registryResponse = registryResponse;
    function tree(data, debug) {
        checkLogger();
        return Logger.logger.tree(data, debug);
    }
    Logger.tree = tree;
})(Logger || (exports.Logger = Logger = {}));
