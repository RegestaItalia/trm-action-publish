"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTadirDependencies = void 0;
const dependency_1 = require("../dependency");
const transport_1 = require("../transport");
const trmPackage_1 = require("../trmPackage");
const SAP_SOURCE_SYSTEMS = ['SAP'];
const SAP_AUTHORS = ['SAP'];
function findTadirDependencies(data, system, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const senviParser = new dependency_1.SenviParser(system);
        var tadir = data.tadir;
        var devclass = data.devclass;
        var aSenvi = [];
        var tadirDependencies = [];
        var aIgnoredDevclass = [devclass];
        aIgnoredDevclass = aIgnoredDevclass.concat((yield system.getSubpackages(devclass)).map(o => o.devclass));
        if (!tadir) {
            tadir = yield system.getDevclassObjects(devclass, true);
        }
        for (const tadirObj of tadir) {
            aSenvi = aSenvi.concat(yield system.rfcClient.repositoryEnvironment(tadirObj.object, tadirObj.objName));
        }
        for (const senvi of aSenvi) {
            const tadirDependency = yield senviParser.parse(senvi);
            if (tadirDependency) {
                if (!tadirDependencies.find(o => o.pgmid === tadirDependency.pgmid &&
                    o.object === tadirDependency.object &&
                    o.objName === tadirDependency.objName)) {
                    tadirDependencies.push(tadirDependency);
                }
            }
        }
        tadirDependencies = tadirDependencies.filter(o => !aIgnoredDevclass.includes(o.devclass));
        var packageDependencies = [];
        for (const tadirDependency of tadirDependencies) {
            var latestTransport;
            var isSap = false;
            if (SAP_SOURCE_SYSTEMS.includes(tadirDependency.srcsystem) || SAP_AUTHORS.includes(tadirDependency.author)) {
                isSap = true;
            }
            if (!isSap) {
                var trmRelevantTransports = [];
                const allTransports = yield transport_1.Transport.getTransportsFromObject({
                    pgmid: tadirDependency.pgmid,
                    object: tadirDependency.object,
                    objName: tadirDependency.objName
                }, system);
                for (const transport of allTransports) {
                    if (yield transport.isTrmRelevant()) {
                        trmRelevantTransports.push(transport);
                    }
                }
                latestTransport = yield transport_1.Transport.getLatest(trmRelevantTransports);
            }
            var arrayIndex;
            if (latestTransport) {
                const linkedPackage = yield latestTransport.getLinkedPackage();
                arrayIndex = packageDependencies.findIndex(o => o.trmPackage && trmPackage_1.TrmPackage.compare(o.trmPackage, linkedPackage));
                if (arrayIndex < 0) {
                    const integrity = yield system.getPackageIntegrity(linkedPackage);
                    arrayIndex = packageDependencies.push({
                        trmPackage: linkedPackage,
                        integrity,
                        isSap: false,
                        tadir: []
                    });
                    arrayIndex--;
                }
                packageDependencies[arrayIndex].tadir.push(tadirDependency);
            }
            else {
                arrayIndex = packageDependencies.findIndex(o => !o.trmPackage && o.isSap === isSap);
                if (arrayIndex < 0) {
                    arrayIndex = packageDependencies.push({
                        trmPackage: null,
                        isSap,
                        tadir: []
                    });
                    arrayIndex--;
                }
                packageDependencies[arrayIndex].tadir.push(tadirDependency);
            }
        }
        return packageDependencies;
    });
}
exports.findTadirDependencies = findTadirDependencies;
