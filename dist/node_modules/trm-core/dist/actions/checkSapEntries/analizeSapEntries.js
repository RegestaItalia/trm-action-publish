"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analizeSapEntries = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
exports.analizeSapEntries = {
    name: 'analize-sap-entries',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.sapEntries && Object.keys(context.parsedInput.sapEntries).length > 0) {
            return true;
        }
        else {
            logger_1.Logger.info(`Package ${context.parsedInput.packageName} has no SAP entries`, context.parsedInput.print);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const sapEntries = context.parsedInput.sapEntries;
        context.runtime.okEntries = [];
        context.runtime.koEntries = [];
        context.runtime.tables = [];
        var entriesCount = 0;
        var tableFields = [];
        Object.keys(sapEntries).forEach(tableName => {
            var aFields = [];
            sapEntries[tableName].forEach(o => {
                entriesCount++;
                Object.keys(o).forEach(field => {
                    if (!aFields.includes(field)) {
                        aFields.push(field);
                    }
                });
            });
            tableFields.push({
                tableName,
                fields: aFields
            });
        });
        if (entriesCount === 0) {
            return;
        }
        logger_1.Logger.info(`Package ${context.parsedInput.packageName} has ${entriesCount} SAP entries`, context.parsedInput.print);
        for (const table of Object.keys(sapEntries)) {
            var tableExists;
            try {
                tableExists = yield systemConnector_1.SystemConnector.checkSapEntryExists('TADIR', {
                    pgmid: 'R3TR',
                    object: 'TABL',
                    obj_name: table
                });
            }
            catch (e) {
                tableExists = false;
            }
            if (!tableExists) {
                context.output.unknownTables.push(table);
                logger_1.Logger.error(`Required ${sapEntries[table].length} entries in ${table}, but table was not found`, context.parsedInput.print);
            }
            else {
                var printTableHead = ['Table name'];
                var printTableData = [];
                var tableData;
                printTableHead = printTableHead.concat(tableFields.find(o => o.tableName === table).fields);
                printTableHead.push('Status');
                for (const tableEntry of sapEntries[table]) {
                    tableData = [table];
                    var entryStatus;
                    try {
                        const exists = yield systemConnector_1.SystemConnector.checkSapEntryExists(table, tableEntry);
                        if (exists) {
                            entryStatus = `OK`;
                            context.runtime.okEntries.push({
                                table,
                                tableEntry
                            });
                        }
                        else {
                            entryStatus = `NOT FOUND`;
                            context.runtime.koEntries.push({
                                table,
                                tableEntry
                            });
                        }
                    }
                    catch (e) {
                        logger_1.Logger.error(e.toString(), true);
                        logger_1.Logger.error(`Error during check of SAP entry ${JSON.stringify(tableEntry)}`, true);
                        entryStatus = `Unknown`;
                        context.runtime.koEntries.push({
                            table,
                            tableEntry
                        });
                    }
                    Object.keys(tableEntry).forEach(field => {
                        const pushIndex = printTableHead.findIndex(headerName => headerName === field);
                        tableData.splice(pushIndex, 0, tableEntry[field]);
                    });
                    tableData.push(entryStatus);
                    printTableData.push(tableData);
                }
                context.runtime.tables.push({
                    head: printTableHead,
                    data: printTableData
                });
            }
        }
        context.runtime.tables.forEach(t => {
            logger_1.Logger.table(t.head, t.data, context.parsedInput.print);
        });
    })
};
