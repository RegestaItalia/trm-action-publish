"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildOutput = void 0;
exports.buildOutput = {
    name: 'build-output',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const items = context.runtime.versionOkDependencies.length +
                context.runtime.versionKoDependencies.length +
                context.runtime.integrityOkDependencies.length +
                context.runtime.integrityKoDependencies.length;
            return items > 0;
        }
        catch (e) {
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        context.output.dependencyStatus = [];
        context.runtime.versionOkDependencies.forEach(o => {
            const i = context.output.dependencyStatus.findIndex(k => k.dependency.name === o.name && k.dependency.registry === o.registry);
            if (i >= 0) {
                context.output.dependencyStatus[i].match = true;
            }
            else {
                context.output.dependencyStatus.push({
                    dependency: o,
                    match: true,
                    safe: null
                });
            }
        });
        context.runtime.versionKoDependencies.forEach(o => {
            const i = context.output.dependencyStatus.findIndex(k => k.dependency.name === o.name && k.dependency.registry === o.registry);
            if (i >= 0) {
                context.output.dependencyStatus[i].match = false;
            }
            else {
                context.output.dependencyStatus.push({
                    dependency: o,
                    match: false,
                    safe: null
                });
            }
        });
        context.runtime.integrityOkDependencies.forEach(o => {
            const i = context.output.dependencyStatus.findIndex(k => k.dependency.name === o.name && k.dependency.registry === o.registry);
            if (i >= 0) {
                context.output.dependencyStatus[i].safe = true;
            }
            else {
                context.output.dependencyStatus.push({
                    dependency: o,
                    match: null,
                    safe: true
                });
            }
        });
        context.runtime.integrityKoDependencies.forEach(o => {
            const i = context.output.dependencyStatus.findIndex(k => k.dependency.name === o.name && k.dependency.registry === o.registry);
            if (i >= 0) {
                context.output.dependencyStatus[i].safe = false;
            }
            else {
                context.output.dependencyStatus.push({
                    dependency: o,
                    match: null,
                    safe: false
                });
            }
        });
    })
};
