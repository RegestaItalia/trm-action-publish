"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analizeDependencies = void 0;
const logger_1 = require("../../logger");
const trmPackage_1 = require("../../trmPackage");
const registry_1 = require("../../registry");
const semver_1 = require("semver");
const systemConnector_1 = require("../../systemConnector");
exports.analizeDependencies = {
    name: 'analize-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.systemPackages && context.parsedInput.systemPackages.length > 0) {
            return true;
        }
        else {
            logger_1.Logger.info(`Package ${context.parsedInput.packageName} has no TRM package dependencies`, context.parsedInput.print);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const dependencies = context.parsedInput.dependencies;
        const systemPackages = context.parsedInput.systemPackages;
        logger_1.Logger.info(`Package ${context.parsedInput.packageName} has ${dependencies.length} TRM package dependencies`, context.parsedInput.print);
        context.runtime.versionOkDependencies = [];
        context.runtime.versionKoDependencies = [];
        context.runtime.integrityOkDependencies = [];
        context.runtime.integrityKoDependencies = [];
        context.runtime.table = {
            head: ['Dependency', 'Registry', 'Dependency range', 'Version on system', 'Version status', 'Integrity status'],
            data: []
        };
        var tableData;
        for (const dependency of dependencies) {
            tableData = [dependency.name, dependency.registry || registry_1.PUBLIC_RESERVED_KEYWORD, dependency.version];
            const dependencyTrmPackage = new trmPackage_1.TrmPackage(dependency.name, new registry_1.Registry(dependency.registry || registry_1.PUBLIC_RESERVED_KEYWORD));
            const systemInstalledPackage = systemPackages.find(o => trmPackage_1.TrmPackage.compare(o, dependencyTrmPackage));
            if (systemInstalledPackage && systemInstalledPackage.manifest) {
                const installedVersion = systemInstalledPackage.manifest.get().version;
                tableData.push(installedVersion);
                if ((0, semver_1.satisfies)(installedVersion, dependency.version)) {
                    tableData.push('OK');
                    context.runtime.versionOkDependencies.push(dependency);
                }
                else {
                    tableData.push('ERR!');
                    context.runtime.versionKoDependencies.push(dependency);
                }
            }
            else {
                tableData.push('Not found');
                tableData.push('ERR!');
                context.runtime.versionKoDependencies.push(dependency);
            }
            try {
                const installedPackageIntegrity = yield systemConnector_1.SystemConnector.getPackageIntegrity(systemInstalledPackage);
                if (installedPackageIntegrity === dependency.integrity) {
                    tableData.push('Safe');
                    context.runtime.integrityOkDependencies.push(dependency);
                }
                else {
                    tableData.push('Unsafe');
                    context.runtime.integrityKoDependencies.push(dependency);
                }
            }
            catch (e) {
                tableData.push('Unknown');
                context.runtime.integrityKoDependencies.push(dependency);
                logger_1.Logger.error(e.toString(), true);
                logger_1.Logger.error(`Couldn't retrieve package integrity`, true);
            }
            context.runtime.table.data.push(tableData);
        }
        logger_1.Logger.table(context.runtime.table.head, context.runtime.table.data, context.parsedInput.print);
    })
};
