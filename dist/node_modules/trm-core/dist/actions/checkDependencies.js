"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkDependencies = void 0;
const semver_1 = require("semver");
const registry_1 = require("../registry");
function checkDependencies(data, system) {
    return __awaiter(this, void 0, void 0, function* () {
        const dependencies = data.dependencies || [];
        var requiredDependenciesTab;
        if (dependencies.length > 0) {
            requiredDependenciesTab = {
                head: ['Dependency', 'Version', 'Registry'],
                data: []
            };
            dependencies.forEach(o => {
                requiredDependenciesTab.data.push([
                    o.name,
                    o.version,
                    o.registry || 'public'
                ]);
            });
        }
        const aSystemPackages = data.installedPackages || (yield system.getInstalledPackages(true));
        var missingDependencies = [];
        var installedDependencies = [];
        for (const d of dependencies) {
            const dependencyName = d.name;
            const dependencyVersionRange = d.version;
            const dependencyRegistry = new registry_1.Registry(d.registry || 'public');
            const installedPackage = aSystemPackages.find(o => o.packageName === dependencyName && o.compareRegistry(dependencyRegistry));
            if (!installedPackage || !installedPackage.manifest) {
                missingDependencies.push(d);
            }
            else {
                const installedPackageIntegrity = yield system.getPackageIntegrity(installedPackage);
                const installedVersion = installedPackage.manifest.get().version;
                if (!(0, semver_1.satisfies)(installedVersion, dependencyVersionRange) || d.integrity !== installedPackageIntegrity) {
                    missingDependencies.push(d);
                }
                else {
                    installedDependencies.push(d);
                }
            }
        }
        return {
            requiredDependenciesTab,
            installedDependencies,
            missingDependencies
        };
    });
}
exports.checkDependencies = checkDependencies;
