"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependency = void 0;
const registry_1 = require("../registry");
const semver = __importStar(require("semver"));
const semverSort = __importStar(require("semver-sort"));
const trmPackage_1 = require("../trmPackage");
const manifest_1 = require("../manifest");
const install_1 = require("./install");
const crypto_1 = require("crypto");
function installDependency(data, inquirer, system, registry, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageName = data.packageName;
        const versionRange = semver.validRange(data.versionRange);
        const integrity = data.integrity;
        const forceInstall = data.originalInstallOptions ? (data.originalInstallOptions.forceInstall ? true : false) : false;
        if (!versionRange) {
            throw new Error(`Dependency "${packageName}", invalid version range.`);
        }
        const rangeVersions = yield registry.getReleases(packageName, versionRange);
        if (rangeVersions.length === 0) {
            throw new Error(`Package "${packageName}", release not found in range ${versionRange}`);
        }
        const installedPackages = data.installedPackages || (yield system.getInstalledPackages());
        var aPackages = [];
        rangeVersions.forEach(o => {
            const dummyManifest = {
                name: packageName,
                version: o.version,
                registry: registry.getRegistryType() === registry_1.RegistryType.PUBLIC ? undefined : registry.endpoint
            };
            const oDummyManifest = new manifest_1.Manifest(dummyManifest);
            aPackages.push(new trmPackage_1.TrmPackage(packageName, registry, oDummyManifest, logger));
        });
        var alreadyInstalled = false;
        aPackages.forEach(o => {
            if (!alreadyInstalled) {
                alreadyInstalled = installedPackages.find(ip => manifest_1.Manifest.compare(ip.manifest, o.manifest, true)) ? true : false;
            }
        });
        if (alreadyInstalled && !forceInstall) {
            logger.info(`Dependency "${packageName}" already installed, skipping installation.`);
            return;
        }
        var version;
        const sortedVersions = semverSort.desc(rangeVersions.map(o => o.version));
        var aSortedPackages = [];
        for (const v of sortedVersions) {
            aSortedPackages = aSortedPackages.concat(aPackages.filter(o => o.manifest.get().version === v));
        }
        if (integrity) {
            for (const oPackage of aSortedPackages) {
                if (!version) {
                    const oArtifact = yield oPackage.fetchRemoteArtifact(oPackage.manifest.get().version);
                    const fetchedIntegrity = (0, crypto_1.createHash)("sha512").update(oArtifact.binary).digest("hex");
                    if (integrity === fetchedIntegrity) {
                        version = oPackage.manifest.get().version;
                    }
                }
            }
        }
        else {
            version = sortedVersions[0];
        }
        if (!version) {
            throw new Error(`Couldn't find dependency "${packageName}" on registry. Try manual install.`);
        }
        yield (0, install_1.install)(Object.assign(Object.assign({}, (data.originalInstallOptions || {})), {
            packageName,
            version,
            integrity,
            safe: integrity ? true : false
        }), inquirer, system, registry, logger);
    });
}
exports.installDependency = installDependency;
