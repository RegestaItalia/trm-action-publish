"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setCircularDependencies = void 0;
const logger_1 = require("../../logger");
exports.setCircularDependencies = {
    name: 'set-circular-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const trmDependencies = (context.output.dependencies || []).filter(o => o.trmPackage);
        if (trmDependencies.length > 0) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skipping circular dependencies check beacuse no TRM packages were found`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const trmDependencies = (context.output.dependencies || []).filter(o => o.trmPackage);
        for (const trmDependency of trmDependencies) {
            const linkedPackage = trmDependency.trmPackage;
            const packageManifest = linkedPackage.manifest;
            if (packageManifest) {
                const packageDependencies = packageManifest.get().dependencies || [];
            }
        }
    })
};
//# sourceMappingURL=setCircularDependencies.js.map