"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepCheckDependencies = void 0;
const logger_1 = require("../../logger");
const trmPackage_1 = require("../../trmPackage");
const registry_1 = require("../../registry");
const _getDependenciesFromTrmManifestDependency = (trmManifestDependency, systemPackages, avoidDependency) => {
    const dummyPackage = new trmPackage_1.TrmPackage(trmManifestDependency.name, new registry_1.Registry(trmManifestDependency.registry || 'public'));
    const trmPackage = systemPackages.find(o => trmPackage_1.TrmPackage.compare(o, dummyPackage));
    if (trmPackage) {
        var dependencies = [];
        if (!avoidDependency.find(o => trmPackage_1.TrmPackage.compare(o, trmPackage))) {
            avoidDependency.push(trmPackage);
            dependencies = _getDependenciesFromTrmPackage(trmPackage, systemPackages, avoidDependency);
        }
        else {
            const manifest = trmPackage.manifest;
            if (manifest) {
                const manifestDependencies = manifest.get().dependencies || [];
                manifestDependencies.forEach(o => {
                    const manifestDependencyDummy = new trmPackage_1.TrmPackage(o.name, new registry_1.Registry(o.registry || 'public'));
                    dependencies.push({
                        packageName: o.name,
                        trmPackage: systemPackages.find(o => trmPackage_1.TrmPackage.compare(o, manifestDependencyDummy)),
                        dependencies: [],
                        circular: true
                    });
                });
            }
        }
        return {
            packageName: trmPackage.packageName,
            trmPackage,
            dependencies,
            circular: false
        };
    }
};
const _getDependenciesFromTrmPackage = (trmPackage, systemPackages, avoidDependency) => {
    var dependencyTreeBranches = [];
    const manifest = trmPackage.manifest;
    if (manifest) {
        const dependencies = manifest.get().dependencies || [];
        dependencies.forEach(d => {
            dependencyTreeBranches = dependencyTreeBranches.concat(_getDependenciesFromTrmManifestDependency(d, systemPackages, avoidDependency));
        });
    }
    return dependencyTreeBranches;
};
exports.deepCheckDependencies = {
    name: 'deep-check-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.deepCheck) {
            const trmDependencies = context.runtime.trmPackageDependencies;
            if (trmDependencies.length > 0) {
                return true;
            }
            else {
                logger_1.Logger.log(`Skipping deep check beacuse no TRM packages were found`, true);
                return false;
            }
        }
        else {
            logger_1.Logger.log(`Skipping deep check (input)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const systemPackages = context.parsedInput.systemPackages;
        const trmDependencies = context.runtime.trmPackageDependencies;
        var dependencyTreeBranches = [];
        trmDependencies.forEach(d => {
            dependencyTreeBranches = dependencyTreeBranches.concat(_getDependenciesFromTrmPackage(d, systemPackages, [d]));
        });
        context.output.deepCheckTree = {
            devclass: context.parsedInput.devclass,
            dependencies: dependencyTreeBranches
        };
    })
};
//# sourceMappingURL=deepCheckDependencies.js.map