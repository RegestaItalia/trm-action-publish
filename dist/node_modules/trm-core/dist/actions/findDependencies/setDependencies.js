"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDependencies = void 0;
const systemConnector_1 = require("../../systemConnector");
const transport_1 = require("../../transport");
const trmPackage_1 = require("../../trmPackage");
const logger_1 = require("../../logger");
const SAP_SOURCE_SYSTEMS = ['SAP'];
const SAP_AUTHORS = ['SAP'];
const _findDependency = (tadirDependency, packageDependencies) => __awaiter(void 0, void 0, void 0, function* () {
    var latestTransport;
    var isSap = false;
    if (SAP_SOURCE_SYSTEMS.includes(tadirDependency.tadir.srcsystem) || SAP_AUTHORS.includes(tadirDependency.tadir.author)) {
        isSap = true;
    }
    logger_1.Logger.log(`Object ${tadirDependency.tadir.pgmid} ${tadirDependency.tadir.object} ${tadirDependency.tadir.objName} is SAP owned: ${isSap}`, true);
    if (!isSap) {
        var trmRelevantTransports = [];
        logger_1.Logger.log(`Searching transports for object ${tadirDependency.tadir.pgmid} ${tadirDependency.tadir.object} ${tadirDependency.tadir.objName}`, true);
        const allTransports = yield transport_1.Transport.getTransportsFromObject({
            pgmid: tadirDependency.tadir.pgmid,
            object: tadirDependency.tadir.object,
            objName: tadirDependency.tadir.objName
        });
        logger_1.Logger.log(`Found ${allTransports.length} transports for object ${tadirDependency.tadir.pgmid} ${tadirDependency.tadir.object} ${tadirDependency.tadir.objName}`, true);
        for (const transport of allTransports) {
            if (yield transport.isTrmRelevant()) {
                logger_1.Logger.log(`Transport ${transport.trkorr} is TRM relevant`, true);
                trmRelevantTransports.push(transport);
            }
        }
        latestTransport = yield transport_1.Transport.getLatest(trmRelevantTransports);
    }
    var arrayIndex;
    if (latestTransport) {
        logger_1.Logger.log(`TRM transport for object ${tadirDependency.tadir.pgmid} ${tadirDependency.tadir.object} ${tadirDependency.tadir.objName}: ${latestTransport.trkorr}`, true);
        const linkedPackage = yield latestTransport.getLinkedPackage();
        logger_1.Logger.log(`TRM package for transport ${latestTransport.trkorr} is ${linkedPackage.packageName}`, true);
        arrayIndex = packageDependencies.findIndex(o => o.trmPackage && trmPackage_1.TrmPackage.compare(o.trmPackage, linkedPackage));
        if (arrayIndex < 0) {
            const integrity = yield systemConnector_1.SystemConnector.getPackageIntegrity(linkedPackage);
            if (!integrity) {
                throw new Error(`Package ${linkedPackage.packageName}, integrity not found!`);
            }
            logger_1.Logger.log(`Dependency with ${linkedPackage.packageName} found, integrity ${integrity}`, true);
            arrayIndex = packageDependencies.push({
                trmPackage: linkedPackage,
                integrity,
                isSap: false,
                tadir: [],
                dependencyIn: []
            });
            arrayIndex--;
        }
    }
    else {
        logger_1.Logger.log(`Object ${tadirDependency.tadir.pgmid} ${tadirDependency.tadir.object} ${tadirDependency.tadir.objName} has no TRM transport`, true);
        if (!isSap) {
            arrayIndex = packageDependencies.findIndex(o => !o.trmPackage && o.isSap === isSap && o.tadir && o.tadir.find(k => k.devclass === tadirDependency.tadir.devclass));
        }
        else {
            arrayIndex = packageDependencies.findIndex(o => !o.trmPackage && o.isSap === isSap);
        }
        if (arrayIndex < 0) {
            logger_1.Logger.log(`Dependency without TRM package (${tadirDependency.tadir.devclass}) found`, true);
            arrayIndex = packageDependencies.push({
                trmPackage: null,
                isSap,
                tadir: [],
                dependencyIn: []
            });
            arrayIndex--;
        }
    }
    packageDependencies[arrayIndex].tadir.push(tadirDependency.tadir);
    if (!packageDependencies[arrayIndex].dependencyIn.find(o => o.pgmid === tadirDependency.dependencyIn.pgmid
        && o.object === tadirDependency.dependencyIn.object
        && o.objName === tadirDependency.dependencyIn.objName)) {
        packageDependencies[arrayIndex].dependencyIn.push(tadirDependency.dependencyIn);
    }
    return packageDependencies;
});
exports.setDependencies = {
    name: 'set-dependencies',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var packageDependencies = [];
        const tadirDependencies = context.runtime.tadirDependencies;
        logger_1.Logger.loading(`Searching for dependencies...`);
        for (const tadirDependency of tadirDependencies) {
            packageDependencies = yield _findDependency(tadirDependency, packageDependencies);
        }
        context.output.dependencies = packageDependencies;
        context.runtime.trmPackageDependencies = packageDependencies.filter(o => o.trmPackage).map(o => o.trmPackage);
    })
};
//# sourceMappingURL=setDependencies.js.map