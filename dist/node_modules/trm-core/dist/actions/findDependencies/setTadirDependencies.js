"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTadirDependencies = void 0;
const dependency_1 = require("../../dependency");
exports.setTadirDependencies = {
    name: 'set-tadir-dependencies',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var tadirDependencies = [];
        const aSenvi = context.runtime.senvi;
        const aIgnoredDevclass = context.runtime.devclassIgnore;
        const senviParser = new dependency_1.SenviParser();
        for (const oSenvi of aSenvi) {
            for (const senvi of oSenvi.senvi) {
                const tadirDependency = yield senviParser.parse(senvi);
                if (tadirDependency) {
                    if (!tadirDependencies.find(o => o.tadir.pgmid === tadirDependency.pgmid &&
                        o.tadir.object === tadirDependency.object &&
                        o.tadir.objName === tadirDependency.objName)) {
                        tadirDependencies.push({
                            tadir: tadirDependency,
                            dependencyIn: oSenvi.tadir
                        });
                    }
                    if (tadirDependency.subObject) {
                        debugger;
                    }
                }
            }
        }
        context.runtime.tadirDependencies = tadirDependencies.filter(o => !aIgnoredDevclass.includes(o.tadir.devclass));
    })
};
//# sourceMappingURL=setTadirDependencies.js.map