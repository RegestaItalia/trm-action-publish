import { DEVCLASS, SENVI, TADIR } from "../../client";
import { TrmPackage } from "../../trmPackage";
export type TadirObjectSenvi = {
    tadir: TADIR;
    senvi: SENVI[];
};
export type TableDependency = {
    dependencyIn: TADIR;
    tableDependency: any;
};
export type SapEntriesDependency = {
    table: string;
    dependencies: TableDependency[];
};
export type TrmDependency = {
    devclass: DEVCLASS;
    trmPackage?: TrmPackage;
    integrity?: string;
    sapEntries: SapEntriesDependency[];
};
export type FindDependencyActionInput = {
    devclass: DEVCLASS;
    tadir?: TADIR[];
    systemPackages?: TrmPackage[];
    print?: boolean;
    printSapEntries?: boolean;
    silent?: boolean;
};
type WorkflowParsedInput = {
    devclass?: DEVCLASS;
    tadir?: TADIR[];
    systemPackages?: TrmPackage[];
    print?: boolean;
    printSapEntries?: boolean;
    silent?: boolean;
};
type WorkflowRuntime = {
    devclassIgnore?: DEVCLASS[];
    objectsSenvi?: TadirObjectSenvi[];
    parsedSenvi?: SapEntriesDependency[];
};
export type FindDependencyActionOutput = {
    sapEntries?: SapEntriesDependency[];
    trmDependencies?: TrmDependency[];
    unknownDependencies?: TrmDependency[];
};
export type FindDependenciesWorkflowContext = {
    rawInput: FindDependencyActionInput;
    parsedInput: WorkflowParsedInput;
    runtime: WorkflowRuntime;
    output: FindDependencyActionOutput;
};
export declare function findDependencies(inputData: FindDependencyActionInput): Promise<FindDependencyActionOutput>;
export {};
