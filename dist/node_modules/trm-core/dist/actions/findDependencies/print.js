"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.print = void 0;
const logger_1 = require("../../logger");
const registry_1 = require("../../registry");
const _getTableTreeText = (tableData) => {
    var aValues = [];
    Object.keys(tableData).forEach(k => {
        aValues.push(`${k}: ${tableData[k]}`);
    });
    return aValues.join(', ');
};
const _getSapEntriesTreeChildren = (sapEntries) => {
    var treeChildren = [];
    sapEntries.forEach(k => {
        var referenceTableTree = {
            text: k.table,
            children: []
        };
        k.dependencies.forEach(y => {
            const tableKey = _getTableTreeText(y.tableDependency);
            const tadirKey = `${y.dependencyIn.pgmid} ${y.dependencyIn.object} ${y.dependencyIn.objName}`;
            const arrayIndex = referenceTableTree.children.findIndex(o => o.text === tableKey);
            const usedByTree = {
                text: `Used by`,
                children: []
            };
            const usedByTadirTree = {
                text: tadirKey,
                children: []
            };
            usedByTree.children.push(usedByTadirTree);
            if (arrayIndex >= 0) {
                if (!referenceTableTree.children[arrayIndex].children[0].children.find(o => o.text === tadirKey)) {
                    referenceTableTree.children[arrayIndex].children[0].children.push(usedByTadirTree);
                }
            }
            else {
                referenceTableTree.children.push({
                    text: tableKey,
                    children: [usedByTree]
                });
            }
        });
        treeChildren.push(referenceTableTree);
    });
    return treeChildren;
};
exports.print = {
    name: 'print',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.print) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skipping print (input)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const sapEntries = context.output.sapEntries;
        const unknownDependencies = context.output.unknownDependencies;
        const trmDependencies = context.output.trmDependencies;
        var baseTree = {
            text: context.parsedInput.devclass,
            children: []
        };
        var sapEntriesTree = {
            text: `Required SAP Entries`,
            children: _getSapEntriesTreeChildren(sapEntries)
        };
        var unknownDependenciesTree = {
            text: `Without TRM Package`,
            children: []
        };
        var trmDependenciesTree = {
            text: `TRM Packages`,
            children: []
        };
        unknownDependencies.forEach(o => {
            unknownDependenciesTree.children.push({
                text: o.devclass,
                children: [{
                        text: `References`,
                        children: _getSapEntriesTreeChildren(o.sapEntries)
                    }]
            });
        });
        trmDependencies.forEach(o => {
            trmDependenciesTree.children.push({
                text: o.trmPackage.packageName,
                children: [{
                        text: `Registry: ${o.trmPackage.registry.getRegistryType() === registry_1.RegistryType.PUBLIC ? registry_1.PUBLIC_RESERVED_KEYWORD : o.trmPackage.registry.endpoint}`,
                        children: []
                    }, {
                        text: `Version: ${o.trmPackage.manifest.get().version}`,
                        children: []
                    }, {
                        text: `References`,
                        children: _getSapEntriesTreeChildren(o.sapEntries)
                    }]
            });
        });
        if (context.parsedInput.printSapEntries) {
            baseTree.children.push(sapEntriesTree);
        }
        baseTree.children.push(unknownDependenciesTree);
        baseTree.children.push(trmDependenciesTree);
        logger_1.Logger.tree(baseTree);
    })
};
