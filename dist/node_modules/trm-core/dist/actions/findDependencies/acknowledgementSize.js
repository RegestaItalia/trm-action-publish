"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.acknowledgementSize = void 0;
const inquirer_1 = require("../../inquirer");
const logger_1 = require("../../logger");
exports.acknowledgementSize = {
    name: 'acknowledgement-size',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.tadir.length > 50) {
            return true;
        }
        else {
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const size = context.parsedInput.tadir.length;
        const sMsg = `A total of ${size} objects will be analyzed in order to find dependencies, and it may take a long time.`;
        if (!context.parsedInput.silent) {
            const inq1 = yield inquirer_1.Inquirer.prompt({
                type: 'confirm',
                name: 'continueDependency',
                default: true,
                message: `${sMsg} Continue?`
            });
            if (!inq1.continueDependency) {
                throw new Error(`Process aborted by user.`);
            }
        }
        else {
            logger_1.Logger.warning(sMsg);
        }
    })
};
