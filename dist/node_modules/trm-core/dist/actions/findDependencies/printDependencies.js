"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printDependencies = void 0;
const logger_1 = require("../../logger");
const _addTadirToBranch = (tadir, branch) => {
    const key = `${tadir.pgmid} ${tadir.object} ${tadir.objName}`;
    if (tadir.subObject) {
        var parentIndex = branch.children.findIndex(o => o.text === key);
        if (parentIndex < 0) {
            parentIndex = branch.children.push({
                text: key,
                children: []
            });
            parentIndex--;
        }
        if (tadir.subObject.func) {
            branch.children[parentIndex].children.push({
                text: `FM ${tadir.subObject.func}`,
                children: []
            });
        }
    }
    else {
        if (!branch.children.find(o => o.text === key)) {
            branch.children.push({
                text: key,
                children: []
            });
        }
    }
    return branch;
};
exports.printDependencies = {
    name: 'print-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.print) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skipping print (input)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var treeLogData;
        const deepCheckTree = context.output.deepCheckTree;
        const dependencies = context.output.dependencies;
        if (deepCheckTree) {
        }
        else {
            if (dependencies) {
                treeLogData = {
                    text: context.parsedInput.devclass,
                    children: []
                };
                var sapDependencyBranch = {
                    text: `SAP: TADIR Entries`,
                    children: []
                };
                dependencies.filter(o => o.isSap).forEach(o => {
                    o.tadir.forEach(k => {
                        sapDependencyBranch.children.push({
                            text: `${k.pgmid} ${k.object} ${k.objName}`,
                            children: []
                        });
                    });
                });
                if (sapDependencyBranch.children.length > 0) {
                    treeLogData.children.push(sapDependencyBranch);
                }
                var noTrmDependencies = {
                    text: `TRM package not found`,
                    children: []
                };
                dependencies.filter(o => !o.isSap && !o.trmPackage).forEach(o => {
                    var packageBranch = {
                        text: ``,
                        children: []
                    };
                    var packageTadirBranch = {
                        text: `Object list`,
                        children: []
                    };
                    var usedInBranch = {
                        text: `Where used list`,
                        children: []
                    };
                    o.tadir.forEach(k => {
                        packageBranch.text = k.devclass;
                        packageTadirBranch = _addTadirToBranch(k, packageTadirBranch);
                    });
                    o.dependencyIn.forEach(k => {
                        usedInBranch = _addTadirToBranch(k, usedInBranch);
                    });
                    packageBranch.children.push(packageTadirBranch);
                    packageBranch.children.push(usedInBranch);
                    noTrmDependencies.children.push(packageBranch);
                });
                if (noTrmDependencies.children.length > 0) {
                    treeLogData.children.push(noTrmDependencies);
                }
                dependencies.filter(o => !o.isSap && o.trmPackage).forEach(o => {
                    var sVersion;
                    try {
                        sVersion = `^${o.trmPackage.manifest.get().version}`;
                    }
                    catch (e) {
                        sVersion = ``;
                    }
                    treeLogData.children.push({
                        text: `${o.trmPackage.packageName} ${sVersion}`,
                        children: []
                    });
                });
            }
        }
        if (treeLogData) {
            logger_1.Logger.tree(treeLogData);
        }
    })
};
//# sourceMappingURL=printDependencies.js.map