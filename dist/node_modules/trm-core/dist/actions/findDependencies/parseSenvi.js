"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSenvi = void 0;
const dependency_1 = require("../../dependency");
const logger_1 = require("../../logger");
const SAP_SOURCE_SYSTEMS = ['SAP'];
const SAP_AUTHORS = ['SAP'];
const _addEntry = (tableName, sapEntries, dependencyIn, dependency) => {
    logger_1.Logger.log(`Adding dependency to table ${tableName}, dependency in object ${JSON.stringify(dependencyIn)} with ${JSON.stringify(dependency)}`, true);
    var index = sapEntries.findIndex(o => o.table === tableName);
    if (index < 0) {
        index = sapEntries.push({
            table: tableName,
            dependencies: []
        });
        index--;
    }
    sapEntries[index].dependencies.push({
        dependencyIn,
        tableDependency: dependency
    });
    return sapEntries;
};
exports.parseSenvi = {
    name: 'parse-senvi',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const objectsSenvi = context.runtime.objectsSenvi;
        const aIgnoredDevclass = context.runtime.devclassIgnore;
        const senviParser = new dependency_1.SenviParser();
        context.runtime.parsedSenvi = [];
        context.output.sapEntries = [];
        logger_1.Logger.loading(`Reading object dependencies...`);
        for (const objectSenvi of objectsSenvi) {
            logger_1.Logger.log(`Parsing SENVI of TADIR object ${objectSenvi.tadir.pgmid} ${objectSenvi.tadir.object} ${objectSenvi.tadir.objName}, ${objectSenvi.senvi} entries`, true);
            for (const senvi of objectSenvi.senvi) {
                logger_1.Logger.loading(`Parsing SENVI object ${senvi.type} ${senvi.object} ${senvi.enclObj}...`, true);
                const parsedSenvi = yield senviParser.parse(senvi);
                logger_1.Logger.log(`Result: ${JSON.stringify(parsedSenvi)}`, true);
                if (parsedSenvi && !aIgnoredDevclass.includes(parsedSenvi.devclass)) {
                    var aParsedSenvi;
                    if (SAP_SOURCE_SYSTEMS.includes(parsedSenvi.srcsystem) || SAP_AUTHORS.includes(parsedSenvi.author)) {
                        aParsedSenvi = context.output.sapEntries;
                        logger_1.Logger.log(`Dependency with SAP object`, true);
                    }
                    else {
                        aParsedSenvi = context.runtime.parsedSenvi;
                        logger_1.Logger.log(`Dependency with custom object`, true);
                    }
                    aParsedSenvi = _addEntry('TADIR', aParsedSenvi, objectSenvi.tadir, {
                        'PGMID': parsedSenvi.pgmid,
                        'OBJECT': parsedSenvi.object,
                        'OBJ_NAME': parsedSenvi.objName,
                        'DEVCLASS': parsedSenvi.devclass
                    });
                    if (parsedSenvi.subObject) {
                        if (parsedSenvi.subObject.func) {
                            aParsedSenvi = _addEntry('TFDIR', aParsedSenvi, objectSenvi.tadir, {
                                'FUNCNAME': parsedSenvi.subObject.func,
                                'PNAME': `SAPL${parsedSenvi.objName}`
                            });
                        }
                    }
                }
            }
        }
    })
};
