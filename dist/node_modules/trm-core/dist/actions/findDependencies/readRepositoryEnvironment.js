"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readRepositoryEnvironment = void 0;
const systemConnector_1 = require("../../systemConnector");
const logger_1 = require("../../logger");
exports.readRepositoryEnvironment = {
    name: 'read-repository-environment',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var aSenvi = [];
        var tadir = context.parsedInput.tadir;
        tadir = tadir.filter(o => !(o.pgmid === 'R3TR' && o.object === 'DEVC'));
        logger_1.Logger.loading(`Reading objects...`);
        for (const tadirObj of tadir) {
            const senvi = yield systemConnector_1.SystemConnector.repositoryEnvironment(tadirObj.object, tadirObj.objName);
            aSenvi.push({
                tadir: tadirObj,
                senvi
            });
        }
        context.runtime.objectsSenvi = aSenvi;
    })
};
