"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDependencies = void 0;
const sammarksworkflow_1 = __importDefault(require("@simonegaffurini/sammarksworkflow"));
const logger_1 = require("../../logger");
const init_1 = require("./init");
const setSystemPackages_1 = require("./setSystemPackages");
const readPackageData_1 = require("./readPackageData");
const readPackageObjects_1 = require("./readPackageObjects");
const readRepositoryEnvironment_1 = require("./readRepositoryEnvironment");
const parseSenvi_1 = require("./parseSenvi");
const setTrmDependencies_1 = require("./setTrmDependencies");
const print_1 = require("./print");
const acknowledgementSize_1 = require("./acknowledgementSize");
const WORKFLOW_NAME = 'find-dependencies';
function findDependencies(inputData) {
    return __awaiter(this, void 0, void 0, function* () {
        const workflow = [
            init_1.init,
            setSystemPackages_1.setSystemPackages,
            readPackageData_1.readPackageData,
            readPackageObjects_1.readPackageObjects,
            acknowledgementSize_1.acknowledgementSize,
            readRepositoryEnvironment_1.readRepositoryEnvironment,
            parseSenvi_1.parseSenvi,
            setTrmDependencies_1.setTrmDependencies,
            print_1.print
        ];
        logger_1.Logger.log(`Ready to execute workflow ${WORKFLOW_NAME}, input data: ${(0, logger_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
        const result = yield (0, sammarksworkflow_1.default)(WORKFLOW_NAME, workflow, {
            rawInput: inputData,
            parsedInput: {},
            runtime: {},
            output: {}
        });
        logger_1.Logger.log(`Workflow ${WORKFLOW_NAME} result: ${(0, logger_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
        return result.output;
    });
}
exports.findDependencies = findDependencies;
