"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setCustTransports = void 0;
const logger_1 = require("../../logger");
const Inquirer_1 = require("../../inquirer/Inquirer");
const transport_1 = require("../../transport");
exports.setCustTransports = {
    name: 'set-cust-transports',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.skipCust) {
            logger_1.Logger.log(`Skipping set CUST transports (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var customizingTransports = context.parsedInput.customizingTransports;
        const inq1 = yield Inquirer_1.Inquirer.prompt({
            message: `Customizing transports (separated by comma, leave blank for no customizing)`,
            name: 'transports',
            type: 'input',
            when: !context.parsedInput.silent
        });
        customizingTransports = customizingTransports.concat((inq1.transports || '').split(',')).filter(o => o);
        var aTransports = [];
        if (customizingTransports.length > 0) {
            logger_1.Logger.loading(`Reading customizing transports...`);
            for (var trkorr of customizingTransports) {
                trkorr = trkorr.trim().toUpperCase();
                const mainTransport = new transport_1.Transport(trkorr);
                const tasks = yield mainTransport.getTasks();
                aTransports.push(mainTransport);
                aTransports = aTransports.concat(tasks);
            }
        }
        context.runtime.inputCustTransports = aTransports;
    })
};
