"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTransportTarget = void 0;
const Inquirer_1 = require("../../inquirer/Inquirer");
const inquirer_1 = require("../../inquirer");
const systemConnector_1 = require("../../systemConnector");
const logger_1 = require("../../logger");
exports.setTransportTarget = {
    name: 'set-transport-target',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var trTarget = context.parsedInput.target;
        var systemTmscsys = yield systemConnector_1.SystemConnector.getTransportTargets();
        systemTmscsys = systemTmscsys.sort((a, b) => {
            if (a.systyp === 'V') {
                return -1;
            }
            else if (b.systyp === 'V') {
                return 1;
            }
            else {
                return 0;
            }
        });
        if (!trTarget) {
            if (context.parsedInput.silent) {
                throw new Error(`Running in silent mode and transport target was not set.`);
            }
            const inq2 = yield Inquirer_1.Inquirer.prompt({
                type: "list",
                message: "Transport request target",
                name: "trTarget",
                validate: (input) => __awaiter(void 0, void 0, void 0, function* () {
                    return yield (0, inquirer_1.validateTransportTarget)(input, systemTmscsys);
                }),
                choices: systemTmscsys.map(o => {
                    return {
                        name: `${o.sysnam} (${o.systxt})`,
                        value: o.sysnam
                    };
                })
            });
            trTarget = inq2.trTarget.trim().toUpperCase();
        }
        else {
            trTarget = trTarget.trim().toUpperCase();
            const trTargetValid = yield (0, inquirer_1.validateTransportTarget)(trTarget, systemTmscsys);
            if (trTargetValid && trTargetValid !== true) {
                throw new Error(trTargetValid);
            }
        }
        logger_1.Logger.log(`Publish target: ${trTarget}`, true);
        context.parsedInput.trTarget = trTarget;
    })
};
