"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDependencies = void 0;
const logger_1 = require("../../logger");
const findDependencies_1 = require("../findDependencies");
const SUBWORKFLOW_NAME = 'find-dependencies-sub-publish';
exports.findDependencies = {
    name: 'find-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.skipDependencies) {
            logger_1.Logger.info(`Skipping dependencies.`);
            logger_1.Logger.warning(`Skipping dependencies can cause your package to fail activation. Make sure to manually edit the dependencies if necessary.`);
            return false;
        }
        else {
            if (context.runtime.tadirObjects.length > 0) {
                return true;
            }
            else {
                logger_1.Logger.log(`Skipping dependencies search beacuse no objects were found`, true);
                return false;
            }
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const inputData = {
            devclass: context.parsedInput.devclass,
            tadir: context.runtime.tadirObjects,
            silent: context.parsedInput.silent || !context.parsedInput.skipDependencies
        };
        logger_1.Logger.log(`Ready to execute sub-workflow ${SUBWORKFLOW_NAME}, input data: ${JSON.stringify(inputData)}`, true);
        logger_1.Logger.loading(`Searching package dependencies...`);
        const result = yield (0, findDependencies_1.findDependencies)(inputData);
        logger_1.Logger.log(`Workflow ${SUBWORKFLOW_NAME} result: ${JSON.stringify(result)}`, true);
        const aUnknownDependencyDevclass = (result.unknownDependencies).map(o => o.devclass);
        if (aUnknownDependencyDevclass.length > 0) {
            throw new Error(`Dependencies found with packages ${aUnknownDependencyDevclass.join(', ')}: Unknown TRM package!`);
        }
        context.runtime.dependencies = result;
    })
};
