"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDevclass = void 0;
const Inquirer_1 = require("../../inquirer/Inquirer");
const inquirer_1 = require("../../inquirer");
const logger_1 = require("../../logger");
exports.setDevclass = {
    name: 'set-devclass',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var devclass = context.parsedInput.devclass;
        if (!devclass) {
            if (context.parsedInput.silent) {
                throw new Error(`Running in silent mode and devclass was not set.`);
            }
            const inq1 = yield Inquirer_1.Inquirer.prompt({
                type: "input",
                message: "Package devclass",
                name: "devclass",
                validate: (input) => __awaiter(void 0, void 0, void 0, function* () {
                    return yield (0, inquirer_1.validateDevclass)(input);
                })
            });
            devclass = inq1.devclass;
        }
        devclass = devclass.trim().toUpperCase();
        const devclassValid = yield (0, inquirer_1.validateDevclass)(devclass);
        if (devclassValid && devclassValid !== true) {
            throw new Error(devclassValid);
        }
        logger_1.Logger.log(`Publish devclass: ${devclass}`, true);
        context.parsedInput.devclass = devclass;
    })
};
