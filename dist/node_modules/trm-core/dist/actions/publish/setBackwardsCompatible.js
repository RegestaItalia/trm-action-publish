"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setBackwardsCompatible = void 0;
const logger_1 = require("../../logger");
const Inquirer_1 = require("../../inquirer/Inquirer");
const semver_1 = require("semver");
exports.setBackwardsCompatible = {
    name: 'set-backwards-compatible',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.packageExistsOnRegistry) {
            if (typeof (context.parsedInput.packageBackwardsCompatible) !== 'boolean') {
                if (context.parsedInput.silent) {
                    throw new Error(`Running in silent mode and backwards compatible flag was not set.`);
                }
                var latestPublishedVersion;
                try {
                    const latestPublishedManifest = (yield context.runtime.dummyPackage.fetchRemoteManifest('latest')).get();
                    latestPublishedVersion = (0, semver_1.clean)(latestPublishedManifest.version);
                }
                catch (e) {
                    logger_1.Logger.error(e.toString(), true);
                    logger_1.Logger.error(`Couldn't fetch latest remote version for backwards compatible prompt`, true);
                }
                if (!latestPublishedVersion) {
                    latestPublishedVersion = `Unknown`;
                }
                const inq1 = yield Inquirer_1.Inquirer.prompt({
                    type: "confirm",
                    message: `Is this release backwards compatible with the current latest release ${latestPublishedVersion}?`,
                    name: "backwardsCompatible",
                    default: true
                });
                context.runtime.manifest.backwardsCompatible = inq1.backwardsCompatible;
            }
            else {
                logger_1.Logger.log(`Setting package backwards compatible: ${context.parsedInput.packageBackwardsCompatible} (input)`);
                context.runtime.manifest.backwardsCompatible = context.parsedInput.packageBackwardsCompatible;
            }
        }
        else {
            logger_1.Logger.log(`Setting package backwards compatible by default because it's the first publish`, true);
            context.runtime.manifest.backwardsCompatible = true;
        }
    })
};
