"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setReadme = void 0;
const Inquirer_1 = require("../../inquirer/Inquirer");
const logger_1 = require("../../logger");
exports.setReadme = {
    name: 'set-readme',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.silent) {
            logger_1.Logger.log(`Skipping set readme (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const inq1 = yield Inquirer_1.Inquirer.prompt([{
                message: 'Write readme?',
                type: 'confirm',
                name: 'editReadme',
                default: false,
                when: !context.parsedInput.skipReadme
            }, {
                message: 'Write readme',
                type: 'editor',
                name: 'readme',
                postfix: '.md',
                when: (hash) => {
                    return hash.editReadme;
                },
                default: context.parsedInput.readme
            }]);
        if (inq1.readme) {
            context.parsedInput.readme = inq1.readme;
        }
    })
};
