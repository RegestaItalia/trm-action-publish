import { DEVCLASS, TADIR, TR_TARGET } from "../../client";
import { TrmManifest } from "../../manifest";
import { Registry } from "../../registry";
import { TrmArtifact, TrmPackage } from "../../trmPackage";
import { Transport } from "../../transport";
import { FindDependencyActionOutput } from "../findDependencies";
export type PublishActionInput = {
    package: TrmManifest;
    registry: Registry;
    devclass?: DEVCLASS;
    target?: TR_TARGET;
    skipDependencies?: boolean;
    forceManifestInput?: boolean;
    overwriteManifestValues?: boolean;
    skipEditSapEntries?: boolean;
    skipEditDependencies?: boolean;
    skipReadme?: boolean;
    skipLang?: boolean;
    skipCust?: boolean;
    customizingTransports?: string[];
    readme?: string;
    releaseTimeout?: number;
    tmpFolder?: string;
    silent?: boolean;
};
export type WorkflowParsedInput = {
    packageName?: string;
    version?: string;
    devclass?: string;
    trTarget?: string;
    readme?: string;
    releaseFolder?: string;
    releaseTimeout?: number;
    customizingTransports?: string[];
    skipEditSapEntries?: boolean;
    skipEditDependencies?: boolean;
    skipDependencies?: boolean;
    skipLang?: boolean;
    overwriteManifestValues?: boolean;
    packageBackwardsCompatible?: boolean;
    skipCust?: boolean;
    forceManifestInput?: boolean;
    packagePrivate?: boolean;
    skipReadme?: boolean;
    target?: string;
    silent?: boolean;
};
export type WorkflowRuntime = {
    registry?: Registry;
    dummyPackage?: TrmPackage;
    packageExistsOnRegistry?: boolean;
    tadirObjects?: TADIR[];
    manifest?: TrmManifest;
    trmPackage?: TrmPackage;
    devcTransport?: Transport;
    tryDevcDeleteRevert?: boolean;
    tadirTransport?: Transport;
    tryTadirDeleteRevert?: boolean;
    langTransport?: Transport;
    tryLangDeleteRevert?: boolean;
    inputCustTransports?: Transport[];
    custTransport?: Transport;
    tryCustDeleteRevert?: boolean;
    artifact?: TrmArtifact;
    dependencies?: FindDependencyActionOutput;
};
export type PublishActionOutput = {
    trmPackage: TrmPackage;
};
export type PublishWorkflowContext = {
    rawInput: PublishActionInput;
    parsedInput: WorkflowParsedInput;
    runtime: WorkflowRuntime;
    output?: PublishActionOutput;
};
export declare function publish(inputData: PublishActionInput): Promise<TrmPackage>;
