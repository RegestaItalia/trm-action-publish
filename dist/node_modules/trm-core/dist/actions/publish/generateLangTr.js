"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateLangTr = void 0;
const transport_1 = require("../../transport");
const logger_1 = require("../../logger");
exports.generateLangTr = {
    name: 'generate-lang-tr',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.skipLang) {
            logger_1.Logger.log(`Skipping LANG transport (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        logger_1.Logger.loading(`Generating LANG transport...`);
        const devcOnly = context.runtime.tadirObjects.filter(o => o.pgmid === 'R3TR' && o.object === 'DEVC');
        context.runtime.langTransport = yield transport_1.Transport.createLang({
            target: context.parsedInput.trTarget,
            text: `@X1@TRM: ${context.runtime.manifest.name} v${context.runtime.manifest.version} (L)`
        });
        var iLanguageObjects = 0;
        try {
            yield context.runtime.langTransport.addTranslations(devcOnly.map(o => o.objName));
            iLanguageObjects = (yield context.runtime.langTransport.getE071()).length;
            context.runtime.tryLangDeleteRevert = true;
        }
        catch (e) {
            logger_1.Logger.warning(`Language transport generation error (${e.toString()})`);
        }
        finally {
            if (iLanguageObjects === 0) {
                yield context.runtime.langTransport.delete();
                delete context.runtime.langTransport;
                context.runtime.tryLangDeleteRevert = false;
            }
        }
    }),
    revert: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.tryLangDeleteRevert && context.runtime.langTransport.trkorr) {
            logger_1.Logger.loading(`Rollback LANG transport ${context.runtime.langTransport.trkorr}...`);
            try {
                const canBeDeleted = yield context.runtime.langTransport.canBeDeleted();
                if (canBeDeleted) {
                    yield context.runtime.langTransport.delete();
                    logger_1.Logger.info(`Executed rollback on transport ${context.runtime.langTransport.trkorr}`);
                }
                else {
                    throw new Error(`Transport ${context.runtime.langTransport.trkorr} cannot be deleted`);
                }
            }
            catch (e) {
                logger_1.Logger.info(`Unable to rollback transport ${context.runtime.langTransport.trkorr}`);
                logger_1.Logger.error(e.toString(), true);
            }
        }
    })
};
