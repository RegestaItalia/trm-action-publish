"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.overwriteManifestValues = void 0;
const logger_1 = require("../../logger");
exports.overwriteManifestValues = {
    name: 'overwrite-manifest-values',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (!context.parsedInput.overwriteManifestValues) {
            if (context.runtime.packageExistsOnRegistry) {
                return true;
            }
            else {
                logger_1.Logger.log(`Skip owerwrite manifest values step because it's the first publish`, true);
                return false;
            }
        }
        else {
            logger_1.Logger.log(`Skip owerwrite manifest values step (input)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const latestManifest = (yield context.runtime.dummyPackage.fetchRemoteManifest('latest')).get();
            context.runtime.manifest.description = latestManifest.description;
            context.runtime.manifest.website = latestManifest.website;
            context.runtime.manifest.git = latestManifest.git;
            context.runtime.manifest.authors = latestManifest.authors;
            context.runtime.manifest.keywords = latestManifest.keywords;
            context.runtime.manifest.license = latestManifest.license;
        }
        catch (e) {
            logger_1.Logger.error(e.toString(), true);
            logger_1.Logger.warning(`Error during fetch of latest manifest, values won't be overwritten`);
        }
    })
};
