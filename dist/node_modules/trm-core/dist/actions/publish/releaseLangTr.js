"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.releaseLangTr = void 0;
const logger_1 = require("../../logger");
exports.releaseLangTr = {
    name: 'release-tadir-tr',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.langTransport) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skipping LANG transport release because it wasn't generated or there are no language entries`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const timeout = context.parsedInput.releaseTimeout;
        if (logger_1.Logger.logger instanceof logger_1.CliLogger || logger_1.Logger.logger instanceof logger_1.CliLogFileLogger) {
            logger_1.Logger.logger.forceStop();
        }
        yield context.runtime.langTransport.release(false, true, null, timeout);
        context.runtime.tryLangDeleteRevert = false;
        logger_1.Logger.log(`LANG released, setting try revert to false as it cannot be deleted`, true);
    })
};
