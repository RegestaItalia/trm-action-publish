"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.finalizePublish = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
const crypto_1 = require("crypto");
const registry_1 = require("../../registry");
exports.finalizePublish = {
    name: 'finalize-publish',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        logger_1.Logger.loading(`Finalizing...`);
        try {
            yield systemConnector_1.SystemConnector.addSrcTrkorr(context.runtime.tadirTransport.trkorr);
            logger_1.Logger.log(`TADIR added to src trkorr table, setting try revert to true as reverting is possible`, true);
            context.runtime.tryTadirDeleteRevert = true;
            logger_1.Logger.log(`Generating SHA512`, true);
            const integrity = (0, crypto_1.createHash)("sha512").update(context.runtime.artifact.binary).digest("hex");
            logger_1.Logger.log(`SHA512: ${integrity}`, true);
            logger_1.Logger.log(`Setting package integrity`, true);
            yield systemConnector_1.SystemConnector.setPackageIntegrity({
                package_name: context.parsedInput.packageName,
                package_registry: context.runtime.registry.getRegistryType() === registry_1.RegistryType.PUBLIC ? registry_1.PUBLIC_RESERVED_KEYWORD : context.runtime.registry.endpoint,
                integrity
            });
            context.output = {
                trmPackage: context.runtime.trmPackage
            };
        }
        catch (e) {
            logger_1.Logger.error(e.toString(), true);
            logger_1.Logger.error(`An error occurred during publish finalize. The package has been published, however TRM is inconsistent.`);
        }
        if (process.env.TRM_ENV === 'DEV') {
            throw new Error(`Running in development, rolling back publish`);
        }
    }),
    revert: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.output) {
            delete context.output.trmPackage;
        }
    })
};
