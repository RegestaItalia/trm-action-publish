"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPrivate = void 0;
const logger_1 = require("../../logger");
const Inquirer_1 = require("../../inquirer/Inquirer");
exports.setPrivate = {
    name: 'set-private',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var localPrivate;
        var remotePrivate;
        try {
            const latestPublishedManifest = (yield context.runtime.dummyPackage.fetchRemoteManifest('latest')).get();
            remotePrivate = latestPublishedManifest.private || false;
        }
        catch (e) {
            logger_1.Logger.error(e.toString(), true);
            logger_1.Logger.error(`Couldn't fetch latest remote version for private prompt`, true);
        }
        if (typeof (context.parsedInput.packagePrivate) !== 'boolean') {
            localPrivate = remotePrivate;
        }
        else {
            localPrivate = context.parsedInput.packagePrivate;
        }
        if (typeof (localPrivate) !== 'boolean') {
            if (context.parsedInput.silent) {
                throw new Error(`Running in silent mode and private flag was not set.`);
            }
            const inq1 = yield Inquirer_1.Inquirer.prompt([{
                    type: "list",
                    message: "Package type",
                    name: "private",
                    default: false,
                    choices: [{
                            name: "Public (Visible to all users)",
                            value: false
                        }, {
                            name: "Private (Visible to you and users in organization, if specified)",
                            value: true
                        }]
                }]);
            localPrivate = inq1.private;
        }
        if (typeof (remotePrivate) === 'boolean' && localPrivate !== remotePrivate) {
            const localType = localPrivate ? 'private' : 'public';
            const remoteType = remotePrivate ? 'private' : 'public';
            logger_1.Logger.warning(`Changing package visibility ${remoteType} -> ${localType}`);
        }
        context.runtime.manifest.private = localPrivate;
    })
};
