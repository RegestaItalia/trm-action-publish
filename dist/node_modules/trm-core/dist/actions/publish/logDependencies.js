"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logDependencies = void 0;
const logger_1 = require("../../logger");
exports.logDependencies = {
    name: 'log-dependencies',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.manifest.sapEntries) {
            var sapEntriesCount = 0;
            Object.keys(context.runtime.manifest.sapEntries).forEach(k => {
                try {
                    sapEntriesCount += context.runtime.manifest.sapEntries[k].length;
                }
                catch (e) {
                    throw new Error(`Invalid SAP entry in manifest at key "${k}" (expected array)`);
                }
            });
            logger_1.Logger.info(`This package requires ${sapEntriesCount} SAP entries.`);
        }
        logger_1.Logger.info(`This package requires ${context.runtime.manifest.dependencies.length} TRM dependencies.`);
    })
};
