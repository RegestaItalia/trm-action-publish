"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publish = void 0;
const sammarksworkflow_1 = __importDefault(require("@simonegaffurini/sammarksworkflow"));
const init_1 = require("./init");
const setDevclass_1 = require("./setDevclass");
const checkPublishAllowed_1 = require("./checkPublishAllowed");
const setTransportTarget_1 = require("./setTransportTarget");
const setDevclassObjs_1 = require("./setDevclassObjs");
const findDependencies_1 = require("./findDependencies");
const logger_1 = require("../../logger");
const setTrmDependencies_1 = require("./setTrmDependencies");
const setSapEntries_1 = require("./setSapEntries");
const editSapEntries_1 = require("./editSapEntries");
const editTrmDependencies_1 = require("./editTrmDependencies");
const logDependencies_1 = require("./logDependencies");
const util_1 = require("util");
const checkPackageExistance_1 = require("./checkPackageExistance");
const overwriteManifestValues_1 = require("./overwriteManifestValues");
const setBackwardsCompatible_1 = require("./setBackwardsCompatible");
const setPrivate_1 = require("./setPrivate");
const setManifestValues_1 = require("./setManifestValues");
const buildTrmPackageInstance_1 = require("./buildTrmPackageInstance");
const setReadme_1 = require("./setReadme");
const generateDevcTr_1 = require("./generateDevcTr");
const generateTadirTr_1 = require("./generateTadirTr");
const generateLangTr_1 = require("./generateLangTr");
const releaseTadirTr_1 = require("./releaseTadirTr");
const releaseLangTr_1 = require("./releaseLangTr");
const releaseDevcTr_1 = require("./releaseDevcTr");
const generateTrmArtifact_1 = require("./generateTrmArtifact");
const publishTrmArtifact_1 = require("./publishTrmArtifact");
const finalizePublish_1 = require("./finalizePublish");
const generateCustTr_1 = require("./generateCustTr");
const releaseCustTr_1 = require("./releaseCustTr");
const setCustTransports_1 = require("./setCustTransports");
const WORKFLOW_NAME = 'publish';
function publish(inputData) {
    return __awaiter(this, void 0, void 0, function* () {
        const workflow = [
            init_1.init,
            checkPackageExistance_1.checkPackageExistance,
            checkPublishAllowed_1.checkPublishAllowed,
            setDevclass_1.setDevclass,
            setTransportTarget_1.setTransportTarget,
            setDevclassObjs_1.setDevclassObjs,
            findDependencies_1.findDependencies,
            setTrmDependencies_1.setTrmDependencies,
            setSapEntries_1.setSapEntries,
            editTrmDependencies_1.editTrmDependencies,
            editSapEntries_1.editSapEntries,
            logDependencies_1.logDependencies,
            overwriteManifestValues_1.overwriteManifestValues,
            setBackwardsCompatible_1.setBackwardsCompatible,
            setPrivate_1.setPrivate,
            setManifestValues_1.setManifestValues,
            buildTrmPackageInstance_1.buildTrmPackageInstance,
            setReadme_1.setReadme,
            setCustTransports_1.setCustTransports,
            generateDevcTr_1.generateDevcTr,
            generateTadirTr_1.generateTadirTr,
            generateLangTr_1.generateLangTr,
            generateCustTr_1.generateCustTr,
            releaseTadirTr_1.releaseTadirTr,
            releaseLangTr_1.releaseLangTr,
            releaseCustTr_1.releaseCustTr,
            releaseDevcTr_1.releaseDevcTr,
            generateTrmArtifact_1.generateTrmArtifact,
            publishTrmArtifact_1.publishTrmArtifact,
            finalizePublish_1.finalizePublish
        ];
        logger_1.Logger.log(`Ready to execute workflow ${WORKFLOW_NAME}, input data: ${(0, util_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
        const result = yield (0, sammarksworkflow_1.default)(WORKFLOW_NAME, workflow, {
            rawInput: inputData,
            parsedInput: {},
            runtime: {}
        });
        logger_1.Logger.log(`Workflow ${WORKFLOW_NAME} result: ${(0, util_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
        if (result.output && result.output.trmPackage) {
            return result.output.trmPackage;
        }
        else {
            throw new Error(`An error occurred during publish.`);
        }
    });
}
exports.publish = publish;
