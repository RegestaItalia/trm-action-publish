"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.editSapEntries = void 0;
const logger_1 = require("../../logger");
const Inquirer_1 = require("../../inquirer/Inquirer");
exports.editSapEntries = {
    name: 'edit-sap-entries',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.skipEditSapEntries || context.parsedInput.silent) {
            logger_1.Logger.log(`Skip edit of SAP entries (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var editorValue = '{}';
        if (context.runtime.manifest.sapEntries) {
            editorValue = JSON.stringify(context.runtime.manifest.sapEntries, null, 2);
        }
        const inq1 = yield Inquirer_1.Inquirer.prompt([{
                message: `Manually edit required SAP entries?`,
                type: 'confirm',
                name: 'editSapEntries',
                default: false
            }, {
                message: 'Edit SAP entries',
                type: 'editor',
                name: 'sapEntries',
                postfix: '.json',
                when: (hash) => {
                    return hash.editSapEntries;
                },
                default: editorValue,
                validate: (input) => {
                    try {
                        const parsedInput = JSON.parse(input);
                        if (typeof (parsedInput) === 'object' && !Array.isArray(parsedInput)) {
                            return true;
                        }
                        else {
                            return 'Invalid object';
                        }
                    }
                    catch (e) {
                        return 'Invalid JSON';
                    }
                }
            }]);
        if (inq1.sapEntries) {
            logger_1.Logger.log(`SAP entries have been manually edited: before -> ${JSON.stringify(context.runtime.manifest.sapEntries)}, after -> ${inq1.sapEntries}`, true);
            context.runtime.manifest.sapEntries = JSON.parse(inq1.sapEntries);
        }
        else {
            logger_1.Logger.log(`SAP entries are not been manually edited`, true);
            context.runtime.manifest.sapEntries = context.runtime.manifest.sapEntries || {};
        }
    })
};
