"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAlreadyInstalled = void 0;
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
const semver_1 = require("semver");
exports.checkAlreadyInstalled = {
    name: 'check-already-installed',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.skipAlreadyInstalledCheck) {
            logger_1.Logger.log(`Skipping already installed check (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const installedPackages = context.parsedInput.systemPackages;
        const oManifest = context.runtime.manifest;
        const trmManifest = context.runtime.trmManifest;
        const installedPackage = installedPackages.find(o => manifest_1.Manifest.compare(o.manifest, oManifest, false));
        if (installedPackage) {
            const installVersion = trmManifest.version;
            const installedVersion = installedPackage.manifest.get().version;
            if ((0, semver_1.eq)(installVersion, installedVersion)) {
                if (context.parsedInput.forceInstallSameVersion) {
                    logger_1.Logger.log(`Package ${trmManifest.name} version ${installedVersion} already installed, but install is forced (input)`, true);
                }
                else {
                    throw new Error(`Package ${trmManifest.name} version ${installedVersion} already installed.`);
                }
            }
            else {
                if (context.parsedInput.overwriteInstall) {
                    logger_1.Logger.log(`Package ${trmManifest.name} version ${installedVersion} already installed, but install is forced (input)`, true);
                    if ((0, semver_1.gt)(installVersion, installedVersion)) {
                        logger_1.Logger.info(`Upgrading ${installedVersion} -> ${installVersion}`);
                    }
                    else {
                        logger_1.Logger.warning(`Downgrading ${installedVersion} -> ${installVersion}`);
                    }
                }
                else {
                    throw new Error(`Package ${trmManifest.name} version ${installedVersion} already installed.`);
                }
            }
        }
    })
};
