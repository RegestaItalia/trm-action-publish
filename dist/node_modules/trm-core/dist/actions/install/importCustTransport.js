"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importCustTransport = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
const transport_1 = require("../../transport");
exports.importCustTransport = {
    name: 'import-cust-transport',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.custTransport) {
            if (context.parsedInput.skipCustImport) {
                logger_1.Logger.log(`Skip import CUST transport (input)`, true);
                return false;
            }
            else {
                return true;
            }
        }
        else {
            logger_1.Logger.log(`Skip import CUST transport (no transport data in package)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const importTimeout = context.parsedInput.importTimeout;
        const transportData = context.runtime.custTransport;
        const target = systemConnector_1.SystemConnector.getDest();
        logger_1.Logger.loading(`Importing transport to ${target}...`);
        const transport = yield transport_1.Transport.upload({
            binary: transportData.binaries,
            trTarget: target
        });
        yield transport.import(importTimeout);
        context.runtime.trCopy.push(transportData.trkorr);
    }),
    revert: (context) => __awaiter(void 0, void 0, void 0, function* () {
        logger_1.Logger.error(`CUST transport ${context.runtime.langTransport} can't be removed.`);
    })
};
