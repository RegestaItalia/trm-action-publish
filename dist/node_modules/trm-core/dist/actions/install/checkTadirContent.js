"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkTadirContent = void 0;
const logger_1 = require("../../logger");
const commons_1 = require("../../commons");
exports.checkTadirContent = {
    name: 'check-tadir-content',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.tadirTransport) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skip TADIR content check (no tadir transports were found in package)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const r3trans = context.runtime.r3trans;
        const tadirTransport = context.runtime.tadirTransport;
        const transportData = tadirTransport.binaries.data;
        const tdevc = context.runtime.tdevcData;
        logger_1.Logger.loading(`Checking package objects content...`);
        const aTadir = (0, commons_1.normalize)(yield r3trans.getTableEntries(transportData, 'TADIR'));
        logger_1.Logger.log(`Adding ${aTadir.length} objects to workbench transport (not generated yet)`, true);
        const wbObjects = context.runtime.workbenchObjects.concat(aTadir.map(o => {
            return {
                pgmid: o.pgmid,
                object: o.object,
                objName: o.objName
            };
        }));
        context.runtime.workbenchObjects = wbObjects;
        aTadir.forEach(o => {
            if (!tdevc.find(k => k.devclass === o.devclass)) {
                logger_1.Logger.error(`Object ${o.pgmid} ${o.object} ${o.objName}, devclass ${o.devclass} not found in DEVC transport!`, true);
                throw new Error(`Package includes objects without devclass.`);
            }
        });
        context.runtime.tadirData = aTadir;
    })
};
