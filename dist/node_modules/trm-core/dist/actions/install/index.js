"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = void 0;
const sammarksworkflow_1 = __importDefault(require("@simonegaffurini/sammarksworkflow"));
const logger_1 = require("../../logger");
const util_1 = require("util");
const init_1 = require("./init");
const setSystemPackages_1 = require("./setSystemPackages");
const checkAlreadyInstalled_1 = require("./checkAlreadyInstalled");
const checkSapEntries_1 = require("./checkSapEntries");
const checkDependencies_1 = require("./checkDependencies");
const checkIntegrity_1 = require("./checkIntegrity");
const installDependencies_1 = require("./installDependencies");
const checkTransports_1 = require("./checkTransports");
const readDevcTransport_1 = require("./readDevcTransport");
const setR3trans_1 = require("./setR3trans");
const checkTadirContent_1 = require("./checkTadirContent");
const checkTadirObjectTypes_1 = require("./checkTadirObjectTypes");
const setDevclass_1 = require("./setDevclass");
const generateDevclass_1 = require("./generateDevclass");
const importTadirTransport_1 = require("./importTadirTransport");
const importLangTransport_1 = require("./importLangTransport");
const setPackageIntegrity_1 = require("./setPackageIntegrity");
const generateWbTransport_1 = require("./generateWbTransport");
const importCustTransport_1 = require("./importCustTransport");
const WORKFLOW_NAME = 'install';
function install(inputData) {
    return __awaiter(this, void 0, void 0, function* () {
        const workflow = [
            init_1.init,
            setSystemPackages_1.setSystemPackages,
            checkAlreadyInstalled_1.checkAlreadyInstalled,
            checkIntegrity_1.checkIntegrity,
            checkSapEntries_1.checkSapEntries,
            checkDependencies_1.checkDependencies,
            installDependencies_1.installDependencies,
            setR3trans_1.setR3trans,
            checkTransports_1.checkTransports,
            readDevcTransport_1.readDevcTransport,
            setDevclass_1.setDevclass,
            checkTadirContent_1.checkTadirContent,
            checkTadirObjectTypes_1.checkTadirObjectTypes,
            generateDevclass_1.generateDevclass,
            importTadirTransport_1.importTadirTransport,
            importLangTransport_1.importLangTransport,
            importCustTransport_1.importCustTransport,
            setPackageIntegrity_1.setPackageIntegrity,
            generateWbTransport_1.generateWbTransport
        ];
        logger_1.Logger.log(`Ready to execute workflow ${WORKFLOW_NAME}, input data: ${(0, util_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
        const result = yield (0, sammarksworkflow_1.default)(WORKFLOW_NAME, workflow, {
            rawInput: inputData,
            parsedInput: {},
            runtime: {}
        });
        logger_1.Logger.log(`Workflow ${WORKFLOW_NAME} result: ${(0, util_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
        const trmPackage = result.runtime.trmPackage;
        const registry = result.runtime.registry;
        const wbTransport = result.runtime.wbTransport;
        return {
            trmPackage,
            registry,
            wbTransport
        };
    });
}
exports.install = install;
