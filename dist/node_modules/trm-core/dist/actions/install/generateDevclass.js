"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDevclass = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
const commons_1 = require("../../commons");
exports.generateDevclass = {
    name: 'generate-devclass',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageReplacements = context.runtime.packageReplacements;
        if (packageReplacements && packageReplacements.length > 0) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skip generate devclass (no package replacements)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        var pdevclass = context.parsedInput.transportLayer;
        const packageReplacements = context.runtime.packageReplacements;
        const packageName = context.parsedInput.packageName;
        const tdevct = context.runtime.tdevctData;
        const dlvunit = (0, commons_1.getPackageNamespace)(packageReplacements[0].installDevclass) === '$' ? 'LOCAL' : 'HOME';
        context.runtime.generatedDevclass = [];
        logger_1.Logger.loading(`Generating packages...`);
        for (const packageReplacement of packageReplacements) {
            const devclassExists = yield systemConnector_1.SystemConnector.getDevclass(packageReplacement.installDevclass);
            const oDevcTadir = {
                pgmid: 'R3TR',
                object: 'DEVC',
                objName: packageReplacement.installDevclass,
                devclass: packageReplacement.installDevclass
            };
            if (!devclassExists) {
                logger_1.Logger.loading(`Generating "${packageReplacement.installDevclass}"...`);
                if (!pdevclass) {
                    pdevclass = yield systemConnector_1.SystemConnector.getDefaultTransportLayer();
                }
                const ctext = ((_a = tdevct.find(o => o.devclass === packageReplacement.originalDevclass)) === null || _a === void 0 ? void 0 : _a.ctext) || `TRM ${packageName}`;
                yield systemConnector_1.SystemConnector.createPackage({
                    devclass: packageReplacement.installDevclass,
                    as4user: systemConnector_1.SystemConnector.getLogonUser(),
                    ctext,
                    dlvunit,
                    pdevclass
                });
                context.runtime.generatedDevclass.push(packageReplacement.installDevclass);
            }
            if (dlvunit !== 'LOCAL') {
                yield systemConnector_1.SystemConnector.tadirInterface(oDevcTadir);
                context.runtime.tadirData.push(oDevcTadir);
            }
        }
        logger_1.Logger.loading(`Finalizing packages...`);
        const aDummyTdevc = [];
        const originalPackageHierarchy = context.runtime.originalPackageHierarchy;
        const tdevc = context.runtime.tdevcData;
        for (const packageReplacement of packageReplacements) {
            const originalRoot = originalPackageHierarchy.devclass === packageReplacement.originalDevclass;
            aDummyTdevc.push({
                devclass: packageReplacement.installDevclass,
                parentcl: originalRoot ? '' : tdevc.find(o => o.devclass === packageReplacement.originalDevclass).parentcl
            });
        }
        const installPackageHierarchy = (0, commons_1.getPackageHierarchy)(aDummyTdevc);
        for (const packageReplacement of packageReplacements) {
            const installRoot = installPackageHierarchy.devclass === packageReplacement.installDevclass;
            if (!installRoot) {
                yield systemConnector_1.SystemConnector.clearPackageSuperpackage(packageReplacement.installDevclass);
            }
        }
        for (const packageReplacement of packageReplacements) {
            const installRoot = installPackageHierarchy.devclass === packageReplacement.installDevclass;
            const originalParentCl = tdevc.find(o => o.devclass === packageReplacement.originalDevclass).parentcl;
            if (originalParentCl) {
                const installParentCl = (_b = packageReplacements.find(o => o.originalDevclass === originalParentCl)) === null || _b === void 0 ? void 0 : _b.installDevclass;
                if (installParentCl) {
                    if (!installRoot) {
                        yield systemConnector_1.SystemConnector.setPackageSuperpackage(packageReplacement.installDevclass, installParentCl);
                    }
                }
            }
        }
        logger_1.Logger.success(`Packages generated.`);
    }),
    revert: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const devclassDelete = context.runtime.generatedDevclass;
        for (const devclass of devclassDelete) {
            logger_1.Logger.loading(`Rollback "${devclass}"...`);
            try {
                logger_1.Logger.info(`Rollback "${devclass}"`);
            }
            catch (e) {
                logger_1.Logger.info(`Unable to rollback "${devclass}"`);
                logger_1.Logger.error(e.toString(), true);
            }
        }
    })
};
