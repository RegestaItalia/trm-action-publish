"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importTadirTransport = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
const transport_1 = require("../../transport");
exports.importTadirTransport = {
    name: 'import-tadir-transport',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.tadirTransport) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skip import TADIR transport (no transport data in package)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const importTimeout = context.parsedInput.importTimeout;
        const transportData = context.runtime.tadirTransport;
        const target = systemConnector_1.SystemConnector.getDest();
        logger_1.Logger.loading(`Importing transport to ${target}...`);
        const transport = yield transport_1.Transport.upload({
            binary: transportData.binaries,
            trTarget: target
        });
        yield transport.import(importTimeout);
        const aTadir = context.runtime.tadirData;
        const packageReplacements = context.runtime.packageReplacements;
        logger_1.Logger.loading(`Finalizing TADIR import...`);
        for (const tadir of aTadir) {
            const replacementDevclass = packageReplacements.find(o => o.originalDevclass === tadir.devclass).installDevclass;
            if (replacementDevclass) {
                var object = tadir;
                object.devclass = replacementDevclass;
                object.srcsystem = 'TRM';
                logger_1.Logger.log(`Running TADIR interface for object ${object.pgmid} ${object.object} ${object.objName}, devclass ${tadir.devclass} -> ${object.devclass}, src system ${tadir.srcsystem} -> ${object.srcsystem}`, true);
                yield systemConnector_1.SystemConnector.tadirInterface(object);
            }
            else {
                logger_1.Logger.error(`Replacement devclass not found for ${tadir.devclass}!`, true);
            }
        }
        logger_1.Logger.success(`TADIR import finished.`);
    }),
    revert: (context) => __awaiter(void 0, void 0, void 0, function* () {
        logger_1.Logger.loading(`Rollback TADIR transport ${context.runtime.tadirTransport.trkorr}...`);
        try {
            yield systemConnector_1.SystemConnector.addSkipTrkorr(context.runtime.tadirTransport.trkorr);
            logger_1.Logger.info(`Executed rollback on transport ${context.runtime.tadirTransport.trkorr}`);
        }
        catch (e) {
            logger_1.Logger.info(`Unable to rollback transport ${context.runtime.tadirTransport.trkorr}`);
            logger_1.Logger.error(e.toString(), true);
        }
    })
};
