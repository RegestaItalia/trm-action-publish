"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependencies = void 0;
const logger_1 = require("../../logger");
const Inquirer_1 = require("../../inquirer/Inquirer");
const installDependency_1 = require("../installDependency");
const util_1 = require("util");
const registry_1 = require("../../registry");
const SUBWORKFLOW_NAME = 'install-sub-install-dependency';
exports.installDependencies = {
    name: 'install-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.dependenciesToInstall.length > 0) {
            return true;
        }
        else {
            logger_1.Logger.log(`Skipping dependencies install because there are no dependencies to install`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const mainPackageName = context.parsedInput.packageName;
        const dependenciesToInstall = context.runtime.dependenciesToInstall;
        var continueInstall = false;
        if (context.parsedInput.installMissingDependencies) {
            continueInstall = true;
        }
        else {
            if (!context.parsedInput.noInquirer) {
                const inq1 = yield Inquirer_1.Inquirer.prompt({
                    type: 'confirm',
                    name: 'continueInstall',
                    default: true,
                    message: `Do you wish to install all of the missing dependencies?`
                });
                continueInstall = inq1.continueInstall;
            }
            else {
                logger_1.Logger.info(`Dependencies are not being installed: running in silent and no action was taken.`);
                continueInstall = false;
            }
        }
        if (continueInstall) {
            var installCounter = 0;
            for (const installDependency of dependenciesToInstall) {
                installCounter++;
                logger_1.Logger.info(`-> (${installCounter}/${dependenciesToInstall.length}) Dependency "${installDependency.name}" install started.`);
                const inputData = {
                    packageName: installDependency.name,
                    versionRange: installDependency.version,
                    installOptions: context.rawInput,
                    registry: new registry_1.Registry(installDependency.registry || 'public'),
                    integrity: installDependency.integrity,
                    systemPackages: context.parsedInput.systemPackages,
                    forceInstall: context.parsedInput.skipAlreadyInstalledCheck
                };
                logger_1.Logger.log(`Ready to execute sub-workflow ${SUBWORKFLOW_NAME}, input data: ${(0, util_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
                const result = yield (0, installDependency_1.installDependency)(inputData);
                logger_1.Logger.log(`Workflow ${SUBWORKFLOW_NAME} result: ${(0, util_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
                logger_1.Logger.info(`   (${installCounter}/${dependenciesToInstall.length}) Dependency "${installDependency.name}" install completed.`);
            }
            logger_1.Logger.success(`-> ${dependenciesToInstall.length}/${dependenciesToInstall.length} dependencies installed, package "${mainPackageName}" install can continue.`);
        }
        else {
            throw new Error(`Package has missing dependencies that need to be installed in order to continue.`);
        }
    })
};
