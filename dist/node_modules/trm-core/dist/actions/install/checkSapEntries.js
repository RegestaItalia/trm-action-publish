"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSapEntries = void 0;
const logger_1 = require("../../logger");
const checkSapEntries_1 = require("../checkSapEntries");
const SUBWORKFLOW_NAME = 'check-sap-entries-sub-install';
exports.checkSapEntries = {
    name: 'check-sap-entries',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (!context.parsedInput.checkSapEntries) {
            logger_1.Logger.log(`Skipping SAP entries check (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const trmPackage = context.runtime.trmPackage;
        const inputData = {
            trmPackage,
            print: false
        };
        logger_1.Logger.log(`Ready to execute sub-workflow ${SUBWORKFLOW_NAME}, input data: ${(0, logger_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
        logger_1.Logger.loading(`Checking SAP entries...`);
        const result = yield (0, checkSapEntries_1.checkSapEntries)(inputData);
        logger_1.Logger.log(`Workflow ${SUBWORKFLOW_NAME} result: ${(0, logger_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
        const sapEntriesOutput = result.sapEntriesStatus;
        if (sapEntriesOutput) {
            var missingEntries = [];
            Object.keys(sapEntriesOutput).forEach(t => {
                missingEntries = missingEntries.concat(sapEntriesOutput[t].filter(o => !o.status));
            });
            if (missingEntries.length > 0) {
                throw new Error(`Package requires SAP entries that don't exist on your system.`);
            }
            else {
                logger_1.Logger.success(`SAP entries checked.`);
            }
        }
    })
};
