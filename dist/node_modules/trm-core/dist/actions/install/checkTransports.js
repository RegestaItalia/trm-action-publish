"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkTransports = void 0;
const logger_1 = require("../../logger");
const transport_1 = require("../../transport");
exports.checkTransports = {
    name: 'check-transports',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const r3trans = context.runtime.r3trans;
        const oArtifact = context.runtime.trmArtifact;
        logger_1.Logger.loading(`Reading transports...`);
        const aTransports = yield oArtifact.getTransportBinaries();
        logger_1.Logger.log(`Package content: ${aTransports.map(o => {
            return {
                trkorr: o.trkorr,
                type: o.type
            };
        })}`, true);
        for (const transport of aTransports) {
            try {
                yield r3trans.isTransportValid(transport.binaries.data);
                logger_1.Logger.log(`Transport ${transport.trkorr} is valid.`, true);
            }
            catch (e) {
                throw new Error(`Package contains invalid transport.`);
            }
        }
        const aDevcTransports = aTransports.filter(o => o.type === transport_1.TrmTransportIdentifier.DEVC);
        const aTadirTransports = aTransports.filter(o => o.type === transport_1.TrmTransportIdentifier.TADIR);
        const aLangTransports = aTransports.filter(o => o.type === transport_1.TrmTransportIdentifier.LANG);
        const aCustTransports = aTransports.filter(o => o.type === transport_1.TrmTransportIdentifier.CUST);
        if (aDevcTransports.length !== 1) {
            throw new Error(`Unexpected declaration of devclass in package ${packageName}.`);
        }
        else {
            context.runtime.devcTransport = aDevcTransports[0];
            logger_1.Logger.log(`DEVC transport is ${aDevcTransports[0].trkorr}.`, true);
        }
        if (aTadirTransports.length > 0) {
            if (aTadirTransports.length !== 1) {
                throw new Error(`Unexpected declaration of objects in package ${packageName}.`);
            }
            context.runtime.tadirTransport = aTadirTransports[0];
            logger_1.Logger.log(`TADIR transport is ${aTadirTransports[0].trkorr}.`, true);
        }
        if (aLangTransports.length > 0) {
            if (aLangTransports.length !== 1) {
                throw new Error(`Unexpected declaration of translations in package ${packageName}.`);
            }
            context.runtime.langTransport = aLangTransports[0];
            logger_1.Logger.log(`LANG transport is ${aLangTransports[0].trkorr}.`, true);
        }
        if (aCustTransports.length > 0) {
            if (aCustTransports.length !== 1) {
                throw new Error(`Unexpected declaration of customizing in package ${packageName}.`);
            }
            context.runtime.custTransport = aCustTransports[0];
            logger_1.Logger.log(`CUST transport is ${aCustTransports[0].trkorr}.`, true);
        }
    })
};
