"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkIntegrity = void 0;
const logger_1 = require("../../logger");
exports.checkIntegrity = {
    name: 'check-integrity',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (!context.parsedInput.installIntegrity) {
            logger_1.Logger.log(`Skipping integrity check (input not provided)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const trmManifest = context.runtime.trmManifest;
        const installIntegrity = context.runtime.fetchedIntegrity;
        const inputIntegrity = context.parsedInput.installIntegrity;
        const safe = context.parsedInput.safeInstall;
        if (installIntegrity !== inputIntegrity) {
            logger_1.Logger.warning(`ATTENTION!! Integrity check failed on package ${trmManifest.name}, version ${trmManifest.version}.`);
            logger_1.Logger.warning(`            Local:  ${inputIntegrity}`);
            logger_1.Logger.warning(`            Remote: ${installIntegrity}`);
            if (safe) {
                logger_1.Logger.warning(`            Install will continue.`);
            }
            else {
                throw new Error(`Package installation aborted due to integrity check failure and running in safe mode.`);
            }
        }
    })
};
