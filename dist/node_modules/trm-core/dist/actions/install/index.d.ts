import { Registry } from "../../registry";
import { TransportBinary, TrmArtifact, TrmPackage } from "../../trmPackage";
import { Manifest, TrmManifest, TrmManifestDependency } from "../../manifest";
import { R3trans, R3transOptions } from "node-r3trans";
import { DEVCLASS, E071, TADIR, TDEVC, TDEVCT } from "../../client";
import { PackageHierarchy } from "../../commons";
import { Transport } from "../../transport";
export type InstallPackageReplacements = {
    originalDevclass: string;
    installDevclass: string;
};
export type InstallActionInput = {
    packageName: string;
    registry: Registry;
    version?: string;
    systemPackages?: TrmPackage[];
    integrity?: string;
    r3transOptions?: R3transOptions;
    transportLayer?: string;
    force?: boolean;
    keepOriginalDevclass?: boolean;
    importTimeout?: number;
    generateTransport?: boolean;
    skipSapEntriesCheck?: boolean;
    skipObjectTypesCheck?: boolean;
    skipLangImport?: boolean;
    skipCustImport?: boolean;
    ignoreDependencies?: boolean;
    safeInstall?: boolean;
    wbTrTargetSystem?: string;
    silent?: boolean;
    packageReplacements?: InstallPackageReplacements[];
    allowReplace?: boolean;
};
type WorkflowParsedInput = {
    packageName?: string;
    version?: string;
    skipAlreadyInstalledCheck?: boolean;
    forceInstallSameVersion?: boolean;
    overwriteInstall?: boolean;
    systemPackages?: TrmPackage[];
    checkSapEntries?: boolean;
    checkDependencies?: boolean;
    installMissingDependencies?: boolean;
    installIntegrity?: string;
    safeInstall?: boolean;
    r3transOptions?: R3transOptions;
    checkObjectTypes?: boolean;
    keepOriginalPackages?: boolean;
    forceDevclassInput?: boolean;
    transportLayer?: string;
    importTimeout?: number;
    skipLangImport?: boolean;
    skipCustImport?: boolean;
    skipWbTransportGen?: boolean;
    wbTrTargetSystem?: string;
    packageReplacements?: InstallPackageReplacements[];
    noInquirer?: boolean;
};
type WorkflowRuntime = {
    registry?: Registry;
    trmPackage?: TrmPackage;
    manifest?: Manifest;
    trmManifest?: TrmManifest;
    dependenciesToInstall?: TrmManifestDependency[];
    trmArtifact?: TrmArtifact;
    r3trans?: R3trans;
    devcTransport?: TransportBinary;
    tadirTransport?: TransportBinary;
    langTransport?: TransportBinary;
    custTransport?: TransportBinary;
    tdevcData?: TDEVC[];
    tdevctData?: TDEVCT[];
    tadirData?: TADIR[];
    workbenchObjects?: E071[];
    packageReplacements?: InstallPackageReplacements[];
    generatedDevclass?: DEVCLASS[];
    originalPackageHierarchy?: PackageHierarchy;
    trCopy?: string[];
    fetchedIntegrity?: string;
    wbTransport?: Transport;
};
export type InstallActionOutput = {
    trmPackage: TrmPackage;
    registry: Registry;
    wbTransport?: Transport;
};
export type InstallWorkflowContext = {
    rawInput: InstallActionInput;
    parsedInput: WorkflowParsedInput;
    runtime: WorkflowRuntime;
    output?: InstallActionOutput;
};
export declare function install(inputData: InstallActionInput): Promise<InstallActionOutput>;
export {};
