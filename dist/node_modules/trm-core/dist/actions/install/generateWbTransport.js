"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateWbTransport = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
const transport_1 = require("../../transport");
const commons_1 = require("../../commons");
exports.generateWbTransport = {
    name: 'generate-wb-transport',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.skipWbTransportGen) {
            logger_1.Logger.log(`Skip WB transport generation (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var wbObjectsAdd = [];
        const trmPackage = context.runtime.trmPackage;
        const manifest = context.runtime.trmManifest;
        const oManifest = context.runtime.manifest;
        const wbObjects = context.runtime.tadirData;
        const trCopy = context.runtime.trCopy;
        const targetSystem = context.parsedInput.wbTrTargetSystem;
        for (const wbObject of wbObjects) {
            if (wbObject.pgmid === 'R3TR') {
                const objTadir = yield systemConnector_1.SystemConnector.getObject(wbObject.pgmid, wbObject.object, wbObject.objName);
                const objPackageNs = (0, commons_1.getPackageNamespace)(objTadir.devclass);
                if (objPackageNs !== '$') {
                    wbObjectsAdd.push(objTadir);
                    if (!wbObjectsAdd.find(o => o.pgmid === 'R3TR' && o.object === 'DEVC' && o.objName === objTadir.devclass)) {
                        wbObjectsAdd.push({
                            pgmid: 'R3TR',
                            object: 'DEVC',
                            objName: objTadir.devclass
                        });
                    }
                }
            }
            else {
                wbObjectsAdd.push(wbObject);
            }
        }
        if (wbObjectsAdd.length > 0 || trCopy.length > 0) {
            var wbTransport = yield systemConnector_1.SystemConnector.getPackageWorkbenchTransport(trmPackage);
            if (!wbTransport) {
                wbTransport = yield transport_1.Transport.createWb({
                    text: `TRM generated transport`,
                    target: targetSystem
                });
            }
            yield wbTransport.addComment(`name=${manifest.name}`);
            yield wbTransport.addComment(`version=${manifest.version}`);
            yield wbTransport.setDocumentation(oManifest.getAbapXml());
            yield wbTransport.rename(`@X1@TRM: ${manifest.name} v${manifest.version}`);
            for (const wbObjectAdd of wbObjectsAdd) {
                try {
                    try {
                        yield wbTransport.addObjects([wbObjectAdd], true);
                    }
                    catch (e) {
                        yield wbTransport.addObjects([wbObjectAdd], false);
                    }
                }
                catch (e) {
                }
            }
            for (const trFrom of trCopy) {
                try {
                    yield wbTransport.addObjectsFromTransport(trFrom);
                }
                catch (e) {
                }
            }
            context.runtime.wbTransport = wbTransport;
            logger_1.Logger.success(`Use ${wbTransport.trkorr} for transports.`);
        }
    })
};
