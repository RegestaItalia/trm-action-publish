"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPackageIntegrity = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
const registry_1 = require("../../registry");
exports.setPackageIntegrity = {
    name: 'set-package-integrity',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const registry = context.runtime.registry;
        const packageRegistry = registry.getRegistryType() === registry_1.RegistryType.PUBLIC ? registry_1.PUBLIC_RESERVED_KEYWORD : registry.endpoint;
        const fetchedIntegrity = context.runtime.fetchedIntegrity;
        logger_1.Logger.loading(`Finalizing install...`);
        yield systemConnector_1.SystemConnector.setPackageIntegrity({
            package_name: packageName,
            package_registry: packageRegistry,
            integrity: fetchedIntegrity
        });
    })
};
