"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkTadirObjectTypes = void 0;
const logger_1 = require("../../logger");
const systemConnector_1 = require("../../systemConnector");
exports.checkTadirObjectTypes = {
    name: 'check-tadir-object-types',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.tadirTransport) {
            if (context.parsedInput.checkObjectTypes) {
                return true;
            }
            else {
                logger_1.Logger.log(`Skip TADIR object type check (input)`, true);
                return false;
            }
        }
        else {
            logger_1.Logger.log(`Skip TADIR object type check (no tadir transports were found in package)`, true);
            return false;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const aTadir = context.runtime.tadirData;
        logger_1.Logger.loading(`Checking package objects types...`);
        const systemObjectList = yield systemConnector_1.SystemConnector.getObjectsList();
        aTadir.forEach(o => {
            if (!systemObjectList.find(k => k.pgmid === o.pgmid && k.object === o.object)) {
                logger_1.Logger.error(`TADIR transport contains object ${o.pgmid} ${o.object} ${o.objName}, which is not supported by target install system`, true);
                throw new Error(`Transport contains unknown object type ${o.pgmid} ${o.object}.`);
            }
        });
        logger_1.Logger.success(`All objects in package "${packageName}" supported.`);
    })
};
