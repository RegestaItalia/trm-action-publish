"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkDependencies = void 0;
const logger_1 = require("../../logger");
const util_1 = require("util");
const checkPackageDependencies_1 = require("../checkPackageDependencies");
const SUBWORKFLOW_NAME = 'check-dependencies-sub-install';
exports.checkDependencies = {
    name: 'check-dependencies',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (!context.parsedInput.checkDependencies) {
            logger_1.Logger.log(`Skipping dependencies check (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const trmManifest = context.runtime.trmManifest;
        const dependencies = trmManifest.dependencies || [];
        logger_1.Logger.info(`Package has ${dependencies.length} dependencies.`);
        context.runtime.dependenciesToInstall = [];
        if (dependencies.length === 0) {
            return;
        }
        const trmPackage = context.runtime.trmPackage;
        const systemPackages = context.parsedInput.systemPackages;
        const inputData = {
            trmPackage,
            systemPackages,
            print: false
        };
        logger_1.Logger.log(`Ready to execute sub-workflow ${SUBWORKFLOW_NAME}, input data: ${(0, util_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
        logger_1.Logger.loading(`Checking package dependencies...`);
        const result = yield (0, checkPackageDependencies_1.checkPackageDependencies)(inputData);
        logger_1.Logger.log(`Workflow ${SUBWORKFLOW_NAME} result: ${(0, util_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
        const dependenciesOutput = result.dependencyStatus;
        var dependenciesToInstall = [];
        if (dependenciesOutput) {
            dependenciesOutput.forEach(o => {
                if (!o.match) {
                    dependenciesToInstall.push(o.dependency);
                }
                else {
                    if (!o.safe) {
                        logger_1.Logger.warning(`Dependency "${o.dependency.name}" is installed, but integrity doesn't match.`);
                    }
                }
            });
            if (dependenciesToInstall.length === 0) {
                logger_1.Logger.success(`Package dependencies ok.`);
            }
            else {
                logger_1.Logger.info(`There's a total of ${dependenciesToInstall} dependencies needed in order to install "${trmManifest.name}".`);
            }
        }
        context.runtime.dependenciesToInstall = dependenciesToInstall;
    })
};
