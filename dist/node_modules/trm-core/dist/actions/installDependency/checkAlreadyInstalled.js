"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAlreadyInstalled = void 0;
const logger_1 = require("../../logger");
const manifest_1 = require("../../manifest");
exports.checkAlreadyInstalled = {
    name: 'check-already-installed',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.parsedInput.forceInstall) {
            logger_1.Logger.log(`Skipping already installed check (input)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const aPackages = context.runtime.releasePackages;
        const installedPackages = context.parsedInput.systemPackages;
        var alreadyInstalled = false;
        aPackages.forEach(o => {
            if (!alreadyInstalled) {
                alreadyInstalled = installedPackages.find(ip => manifest_1.Manifest.compare(ip.manifest, o.manifest, true)) ? true : false;
            }
        });
        if (alreadyInstalled) {
            logger_1.Logger.info(`Dependency "${packageName}" already installed.`);
            context.runtime.skipInstall = true;
        }
        context.runtime.skipInstall = alreadyInstalled;
    })
};
