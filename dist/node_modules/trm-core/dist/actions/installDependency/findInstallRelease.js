"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findInstallRelease = void 0;
const logger_1 = require("../../logger");
const semver_sort_1 = require("semver-sort");
const crypto_1 = require("crypto");
exports.findInstallRelease = {
    name: 'find-install-release',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.skipInstall) {
            logger_1.Logger.log(`Skipping find install release (skipInstall)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const releases = context.runtime.releases;
        const aPackages = context.runtime.releasePackages;
        const integrity = context.parsedInput.integrity;
        var version;
        const sortedVersions = (0, semver_sort_1.desc)(releases.map(o => o.version));
        var aSortedPackages = [];
        for (const v of sortedVersions) {
            aSortedPackages = aSortedPackages.concat(aPackages.filter(o => o.manifest.get().version === v));
        }
        if (integrity) {
            for (const oPackage of aSortedPackages) {
                if (!version) {
                    const oArtifact = yield oPackage.fetchRemoteArtifact(oPackage.manifest.get().version);
                    const fetchedIntegrity = (0, crypto_1.createHash)("sha512").update(oArtifact.binary).digest("hex");
                    if (integrity === fetchedIntegrity) {
                        version = oPackage.manifest.get().version;
                    }
                }
            }
        }
        else {
            if (sortedVersions.length > 0) {
                version = sortedVersions[0];
            }
        }
        if (!version) {
            throw new Error(`Couldn't find dependency "${packageName}" on registry. Try manual install.`);
        }
        context.output.version = version;
    })
};
