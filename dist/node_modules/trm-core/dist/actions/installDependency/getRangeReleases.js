"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRangeReleases = void 0;
const manifest_1 = require("../../manifest");
const registry_1 = require("../../registry");
const trmPackage_1 = require("../../trmPackage");
exports.getRangeReleases = {
    name: 'get-range-releases',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const versionRange = context.parsedInput.versionRange;
        const registry = context.runtime.registry;
        const releases = yield registry.getReleases(packageName, versionRange);
        if (releases.length === 0) {
            throw new Error(`Package "${packageName}", release not found in range "${versionRange}"`);
        }
        context.runtime.releases = releases;
        context.runtime.releasePackages = [];
        releases.forEach(o => {
            const dummyManifest = {
                name: packageName,
                version: o.version,
                registry: registry.getRegistryType() === registry_1.RegistryType.PUBLIC ? undefined : registry.endpoint
            };
            const oDummyManifest = new manifest_1.Manifest(dummyManifest);
            context.runtime.releasePackages.push(new trmPackage_1.TrmPackage(packageName, registry, oDummyManifest));
        });
    })
};
