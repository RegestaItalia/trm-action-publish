"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const commons_1 = require("../../commons");
const semver_1 = require("semver");
exports.init = {
    name: 'init',
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        var packageName = context.rawInput.packageName;
        var versionRange = context.rawInput.versionRange;
        const registry = context.rawInput.registry;
        packageName = (0, commons_1.parsePackageName)({
            fullName: packageName
        }).fullName;
        versionRange = (0, semver_1.validRange)(versionRange);
        if (!versionRange) {
            throw new Error(`Dependency "${packageName}", invalid version range.`);
        }
        context.parsedInput.packageName = packageName;
        context.parsedInput.versionRange = versionRange;
        context.parsedInput.forceInstall = context.rawInput.forceInstall ? true : false;
        context.parsedInput.integrity = context.rawInput.integrity;
        context.parsedInput.installOptions = context.rawInput.installOptions || {
            packageName,
            registry
        };
        context.parsedInput.systemPackages = context.rawInput.systemPackages || [];
        context.runtime.registry = registry;
        context.output = {};
    })
};
