"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installRelease = void 0;
const logger_1 = require("../../logger");
const install_1 = require("../install");
const SUBWORKFLOW_NAME = 'install-dependency-sub-install';
exports.installRelease = {
    name: 'install-release',
    filter: (context) => __awaiter(void 0, void 0, void 0, function* () {
        if (context.runtime.skipInstall) {
            logger_1.Logger.log(`Skipping install release (skipInstall)`, true);
            return false;
        }
        else {
            return true;
        }
    }),
    run: (context) => __awaiter(void 0, void 0, void 0, function* () {
        const packageName = context.parsedInput.packageName;
        const version = context.output.version;
        const registry = context.runtime.registry;
        const integrity = context.parsedInput.integrity;
        const installOptions = context.parsedInput.installOptions;
        const inputData = Object.assign(Object.assign({}, installOptions), { packageName,
            version,
            integrity,
            registry });
        logger_1.Logger.log(`Ready to execute sub-workflow ${SUBWORKFLOW_NAME}, input data: ${(0, logger_1.inspect)(inputData, { breakLength: Infinity, compact: true })}`, true);
        const result = yield (0, install_1.install)(inputData);
        logger_1.Logger.log(`Workflow ${SUBWORKFLOW_NAME} result: ${(0, logger_1.inspect)(result, { breakLength: Infinity, compact: true })}`, true);
        context.output.installOutput = result;
    })
};
