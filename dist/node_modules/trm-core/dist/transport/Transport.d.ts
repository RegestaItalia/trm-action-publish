/// <reference types="node" />
import { BinaryTransport } from "./BinaryTransport";
import { FileNames } from "./FileNames";
import { FilePaths } from "./FilePaths";
import { TransportContent } from "./TransportContent";
import { Documentation } from "./Documentation";
import { TrmTransportIdentifier } from "./TrmTransportIdentifier";
import { TrmPackage } from "../trmPackage";
import { TROBJTYPE, E070, E071, TRKORR, TR_TARGET, DEVCLASS, TROBJ_NAME, AS4TEXT, PGMID, SOBJ_NAME } from "../client";
export declare const COMMENT_OBJ: TROBJTYPE;
export declare class Transport {
    trkorr: TRKORR;
    private _trTarget?;
    private _fileNames;
    private _e070;
    private _e071;
    private _docs;
    trmIdentifier?: TrmTransportIdentifier;
    constructor(trkorr: TRKORR, _trTarget?: TR_TARGET);
    setTrmIdentifier(identifier?: TrmTransportIdentifier): Transport;
    getE070(): Promise<E070>;
    getE071(): Promise<E071[]>;
    getTasks(): Promise<Transport[]>;
    getDevclass(): Promise<DEVCLASS>;
    getDate(): Promise<Date>;
    isTrmRelevant(): Promise<boolean>;
    download(): Promise<{
        binaries: BinaryTransport;
        filenames: FileNames;
    }>;
    setDocumentation(sDocumentation: string): Promise<Transport>;
    getDocumentation(): Promise<Documentation[]>;
    static doktlToDoc(doktl: {
        langu: string;
        dokversion: string;
        line: string;
        doktext: string;
    }[]): Documentation[];
    addObjects(objects: E071[], lock: boolean): Promise<void>;
    addComment(comment: TROBJ_NAME): Promise<void>;
    addTranslations(aDevclass: DEVCLASS[]): Promise<void>;
    getLinkedPackage(): Promise<TrmPackage>;
    delete(): Promise<null>;
    release(lock: boolean, skipLog: boolean, tmpFolder?: string, secondsTimeout?: number): Promise<Transport>;
    readReleaseLog(tmpFolder: string, secondsTimeout: number): Promise<void>;
    readImportLog(tmpFolder: string): Promise<void>;
    private _isInTmsQueue;
    private static _getFileNames;
    static _getFilePaths(fileNames: FileNames): Promise<FilePaths>;
    static createToc(data: {
        text: AS4TEXT;
        target: TR_TARGET;
        trmIdentifier?: TrmTransportIdentifier;
    }): Promise<Transport>;
    static createLang(data: {
        text: AS4TEXT;
        target: TR_TARGET;
    }): Promise<Transport>;
    static createWb(data: {
        text: AS4TEXT;
        target?: TR_TARGET;
    }): Promise<Transport>;
    static getContent(data: Buffer, tmpFolder: string): Promise<TransportContent>;
    static upload(data: {
        binary: BinaryTransport;
        tmpFolder?: string;
        trTarget?: TR_TARGET;
    }): Promise<Transport>;
    static getTransportsFromObject(objectKeys: {
        pgmid: PGMID;
        object: TROBJTYPE;
        objName: SOBJ_NAME;
    }): Promise<Transport[]>;
    static getLatest(transports: Transport[]): Promise<Transport>;
    import(timeout?: number): Promise<void>;
    rename(as4text: string): Promise<void>;
    canBeDeleted(): Promise<boolean>;
    addObjectsFromTransport(from: TRKORR): Promise<void>;
}
