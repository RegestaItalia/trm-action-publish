/// <reference types="node" />
import { TRKORR, DEVCLASS, TDEVC, TMSCSYS, TADIR, PGMID, TROBJTYPE, SOBJ_NAME } from "../client";
import { Registry } from "../registry";
import { Transport } from "../transport";
import { TrmPackage } from "../trmPackage";
import { ISystemConnector } from "./ISystemConnector";
import { InstallPackage } from "./InstallPackage";
import { SapMessage } from "./SapMessage";
import * as components from "../client/components";
import * as struct from "../client/struct";
export declare namespace SystemConnector {
    var systemConnector: ISystemConnector;
    function getConnectionData(): any;
    function getDest(): string;
    function getLogonLanguage(c: boolean): string;
    function getLogonUser(): string;
    function connect(): Promise<void>;
    function checkConnection(): Promise<boolean>;
    function getTransportStatus(trkorr: TRKORR): Promise<string>;
    function getPackageWorkbenchTransport(oPackage: TrmPackage): Promise<Transport>;
    function getInstalledPackages(includeSources: boolean): Promise<TrmPackage[]>;
    function generateTrmServerPackage(): Promise<TrmPackage>;
    function getDevclass(devclass: DEVCLASS): Promise<TDEVC>;
    function getTransportTargets(): Promise<TMSCSYS[]>;
    function getSubpackages(devclass: DEVCLASS): Promise<TDEVC[]>;
    function getDevclassObjects(devclass: DEVCLASS, includeSubpackages: boolean): Promise<TADIR[]>;
    function getObject(pgmid: PGMID, object: TROBJTYPE, objName: SOBJ_NAME): Promise<TADIR>;
    function getIgnoredTrkorr(): Promise<TRKORR[]>;
    function getSourceTrkorr(): Promise<TRKORR[]>;
    function addSrcTrkorr(trkorr: TRKORR): Promise<void>;
    function readTmsQueue(target: components.TMSSYSNAM): Promise<struct.STMSIQREQ[]>;
    function createPackage(scompkdtln: struct.SCOMPKDTLN): Promise<void>;
    function getInstallPackages(packageName: string, registry: Registry): Promise<InstallPackage[]>;
    function setPackageSuperpackage(devclass: DEVCLASS, superpackage: DEVCLASS): Promise<void>;
    function clearPackageSuperpackage(devclass: DEVCLASS): Promise<void>;
    function getMessage(data: SapMessage): Promise<string>;
    function checkSapEntryExists(table: string, sapEntry: any): Promise<boolean>;
    function ping(): Promise<string>;
    function getPackageIntegrity(oPackage: TrmPackage): Promise<string>;
    function readTable(tableName: components.TABNAME, fields: struct.RFC_DB_FLD[], options?: string): Promise<any[]>;
    function getFileSystem(): Promise<struct.FILESYS>;
    function getDirTrans(): Promise<components.PFEVALUE>;
    function getBinaryFile(filePath: string): Promise<Buffer>;
    function writeBinaryFile(filePath: string, binary: Buffer): Promise<void>;
    function createTocTransport(text: components.AS4TEXT, target: components.TR_TARGET): Promise<components.TRKORR>;
    function createWbTransport(text: components.AS4TEXT, target?: components.TR_TARGET): Promise<components.TRKORR>;
    function setTransportDoc(trkorr: components.TRKORR, doc: struct.TLINE[]): Promise<void>;
    function addToTransportRequest(trkorr: components.TRKORR, content: struct.E071[], lock: boolean): Promise<void>;
    function repositoryEnvironment(objectType: components.SEU_OBJ, objectName: components.SOBJ_NAME): Promise<struct.SENVI[]>;
    function deleteTrkorr(trkorr: components.TRKORR): Promise<void>;
    function releaseTrkorr(trkorr: components.TRKORR, lock: boolean, timeout?: number): Promise<void>;
    function addSkipTrkorr(trkorr: components.TRKORR): Promise<void>;
    function trCopy(from: components.TRKORR, to: components.TRKORR, doc: boolean): Promise<void>;
    function getDefaultTransportLayer(): Promise<components.DEVLAYER>;
    function tadirInterface(tadir: struct.TADIR): Promise<void>;
    function dequeueTransport(trkorr: components.TRKORR): Promise<void>;
    function forwardTransport(trkorr: components.TRKORR, target: components.TMSSYSNAM, source: components.TMSSYSNAM, importAgain: boolean): Promise<void>;
    function importTransport(trkorr: components.TRKORR, system: components.TMSSYSNAM): Promise<void>;
    function setInstallDevc(installDevc: struct.ZTRM_INSTALLDEVC[]): Promise<void>;
    function getObjectsList(): Promise<struct.KO100[]>;
    function renameTransportRequest(trkorr: components.TRKORR, as4text: components.AS4TEXT): Promise<void>;
    function setPackageIntegrity(integrity: struct.ZTRM_INTEGRITY): Promise<void>;
    function addTranslationToTr(trkorr: components.TRKORR, devclassFilter: struct.LXE_TT_PACKG_LINE[]): Promise<void>;
    function getFunctionModule(func: components.RS38L_FNAME): Promise<struct.TFDIR>;
}
