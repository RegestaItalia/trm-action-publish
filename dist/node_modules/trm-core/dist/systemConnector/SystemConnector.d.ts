import { Logger } from "../logger";
import { Registry } from "../registry";
import { RFCClient } from "../rfc/client";
import { DEVCLASS, PGMID, SOBJ_NAME, TRKORR, TROBJTYPE } from "../rfc/components";
import { TADIR, TDEVC, TMSCSYS } from "../rfc/struct";
import { Transport } from "../transport";
import { TrmPackage } from "../trmPackage";
import { Connection } from "./Connection";
import { Login } from "./Login";
export declare const TRM_SERVER_PACKAGE_NAME: string;
export declare const SRC_TRKORR_TABL = "ZTRM_SRC_TRKORR";
export declare const SKIP_TRKORR_TABL = "ZTRM_SKIP_TRKORR";
export declare class SystemConnector {
    private _connection;
    private _login;
    private _logger?;
    private _dest;
    private _lang;
    private _user;
    address: string;
    rfcClient: RFCClient;
    constructor(_connection: Connection, _login: Login, _logger?: Logger);
    getDest(): string;
    getLogonLanguage(c?: boolean): string;
    getLogonUser(): string;
    connect(skipLog?: boolean): Promise<void>;
    getPackageWorkbenchTransport(oPackage: TrmPackage): Promise<Transport>;
    getInstalledPackages(skipLog?: boolean, includeSoruces?: boolean): Promise<TrmPackage[]>;
    getDevclass(devclass: DEVCLASS): Promise<TDEVC>;
    getTransportTargets(): Promise<TMSCSYS[]>;
    getSubpackages(devclass: DEVCLASS): Promise<TDEVC[]>;
    getDevclassObjects(devclass: DEVCLASS, includeSubpackages?: boolean): Promise<TADIR[]>;
    getObject(pgmid: PGMID, object: TROBJTYPE, objName: SOBJ_NAME): Promise<TADIR>;
    getIgnoredTrkorr(): Promise<TRKORR[]>;
    getSourceTrkorr(): Promise<TRKORR[]>;
    addToIgnoredTrkorr(trkorr: TRKORR): Promise<void>;
    addToSrcTrkorr(trkorr: TRKORR): Promise<void>;
    getInstallPackages(packageName: string, registry: Registry): Promise<{
        originalDevclass: DEVCLASS;
        installDevclass: DEVCLASS;
    }[]>;
    setPackageSuperpackage(devclass: DEVCLASS, superpackage: DEVCLASS): Promise<void>;
    clearPackageSuperpackage(devclass: DEVCLASS): Promise<void>;
    getMessage(data: {
        class: string;
        no: string;
        v1?: string;
        v2?: string;
        v3?: string;
        v4?: string;
    }): Promise<string>;
    checkSapEntryExists(table: string, sapEntry: any): Promise<boolean>;
    ping(): Promise<string>;
    getPackageIntegrity(oPackage: TrmPackage): Promise<string>;
}
