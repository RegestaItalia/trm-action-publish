"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemConnector = void 0;
var SystemConnector;
(function (SystemConnector) {
    function checkSystemConnector() {
        if (!SystemConnector.systemConnector) {
            throw new Error('System connector not initialized.');
        }
        else {
            return new Promise((res, rej) => {
                SystemConnector.systemConnector.checkConnection().then(() => {
                    res();
                }).catch(e => {
                    rej(e);
                });
            });
        }
    }
    function getConnectionData() {
        checkSystemConnector();
        return SystemConnector.systemConnector.getConnectionData();
    }
    SystemConnector.getConnectionData = getConnectionData;
    function getDest() {
        checkSystemConnector();
        return SystemConnector.systemConnector.getDest();
    }
    SystemConnector.getDest = getDest;
    function getLogonLanguage(c) {
        checkSystemConnector();
        return SystemConnector.systemConnector.getLogonLanguage(c);
    }
    SystemConnector.getLogonLanguage = getLogonLanguage;
    function getLogonUser() {
        checkSystemConnector();
        return SystemConnector.systemConnector.getLogonUser();
    }
    SystemConnector.getLogonUser = getLogonUser;
    function connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.connect();
        });
    }
    SystemConnector.connect = connect;
    function checkConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.checkConnection();
        });
    }
    SystemConnector.checkConnection = checkConnection;
    function getTransportStatus(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getTransportStatus(trkorr);
        });
    }
    SystemConnector.getTransportStatus = getTransportStatus;
    function getPackageWorkbenchTransport(oPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getPackageWorkbenchTransport(oPackage);
        });
    }
    SystemConnector.getPackageWorkbenchTransport = getPackageWorkbenchTransport;
    function getInstalledPackages(includeSources) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getInstalledPackages(includeSources);
        });
    }
    SystemConnector.getInstalledPackages = getInstalledPackages;
    function generateTrmServerPackage() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.generateTrmServerPackage();
        });
    }
    SystemConnector.generateTrmServerPackage = generateTrmServerPackage;
    function getDevclass(devclass) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getDevclass(devclass);
        });
    }
    SystemConnector.getDevclass = getDevclass;
    function getTransportTargets() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getTransportTargets();
        });
    }
    SystemConnector.getTransportTargets = getTransportTargets;
    function getSubpackages(devclass) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getSubpackages(devclass);
        });
    }
    SystemConnector.getSubpackages = getSubpackages;
    function getDevclassObjects(devclass, includeSubpackages) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getDevclassObjects(devclass, includeSubpackages);
        });
    }
    SystemConnector.getDevclassObjects = getDevclassObjects;
    function getObject(pgmid, object, objName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getObject(pgmid, object, objName);
        });
    }
    SystemConnector.getObject = getObject;
    function getIgnoredTrkorr() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getIgnoredTrkorr();
        });
    }
    SystemConnector.getIgnoredTrkorr = getIgnoredTrkorr;
    function getSourceTrkorr() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getSourceTrkorr();
        });
    }
    SystemConnector.getSourceTrkorr = getSourceTrkorr;
    function addSrcTrkorr(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.addSrcTrkorr(trkorr);
        });
    }
    SystemConnector.addSrcTrkorr = addSrcTrkorr;
    function readTmsQueue(target) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.readTmsQueue(target);
        });
    }
    SystemConnector.readTmsQueue = readTmsQueue;
    function createPackage(scompkdtln) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.createPackage(scompkdtln);
        });
    }
    SystemConnector.createPackage = createPackage;
    function getInstallPackages(packageName, registry) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getInstallPackages(packageName, registry);
        });
    }
    SystemConnector.getInstallPackages = getInstallPackages;
    function setPackageSuperpackage(devclass, superpackage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.setPackageSuperpackage(devclass, superpackage);
        });
    }
    SystemConnector.setPackageSuperpackage = setPackageSuperpackage;
    function clearPackageSuperpackage(devclass) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.clearPackageSuperpackage(devclass);
        });
    }
    SystemConnector.clearPackageSuperpackage = clearPackageSuperpackage;
    function getMessage(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getMessage(data);
        });
    }
    SystemConnector.getMessage = getMessage;
    function checkSapEntryExists(table, sapEntry) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.checkSapEntryExists(table, sapEntry);
        });
    }
    SystemConnector.checkSapEntryExists = checkSapEntryExists;
    function ping() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.ping();
        });
    }
    SystemConnector.ping = ping;
    function getPackageIntegrity(oPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getPackageIntegrity(oPackage);
        });
    }
    SystemConnector.getPackageIntegrity = getPackageIntegrity;
    function readTable(tableName, fields, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.readTable(tableName, fields, options);
        });
    }
    SystemConnector.readTable = readTable;
    function getFileSystem() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getFileSystem();
        });
    }
    SystemConnector.getFileSystem = getFileSystem;
    function getDirTrans() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getDirTrans();
        });
    }
    SystemConnector.getDirTrans = getDirTrans;
    function getBinaryFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getBinaryFile(filePath);
        });
    }
    SystemConnector.getBinaryFile = getBinaryFile;
    function writeBinaryFile(filePath, binary) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.writeBinaryFile(filePath, binary);
        });
    }
    SystemConnector.writeBinaryFile = writeBinaryFile;
    function createTocTransport(text, target) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.createTocTransport(text, target);
        });
    }
    SystemConnector.createTocTransport = createTocTransport;
    function createWbTransport(text, target) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.createWbTransport(text, target);
        });
    }
    SystemConnector.createWbTransport = createWbTransport;
    function setTransportDoc(trkorr, doc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.setTransportDoc(trkorr, doc);
        });
    }
    SystemConnector.setTransportDoc = setTransportDoc;
    function addToTransportRequest(trkorr, content, lock) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.addToTransportRequest(trkorr, content, lock);
        });
    }
    SystemConnector.addToTransportRequest = addToTransportRequest;
    function repositoryEnvironment(objectType, objectName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.repositoryEnvironment(objectType, objectName);
        });
    }
    SystemConnector.repositoryEnvironment = repositoryEnvironment;
    function deleteTrkorr(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.deleteTrkorr(trkorr);
        });
    }
    SystemConnector.deleteTrkorr = deleteTrkorr;
    function releaseTrkorr(trkorr, lock, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.releaseTrkorr(trkorr, lock, timeout);
        });
    }
    SystemConnector.releaseTrkorr = releaseTrkorr;
    function addSkipTrkorr(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.addSkipTrkorr(trkorr);
        });
    }
    SystemConnector.addSkipTrkorr = addSkipTrkorr;
    function trCopy(from, to, doc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.trCopy(from, to, doc);
        });
    }
    SystemConnector.trCopy = trCopy;
    function getDefaultTransportLayer() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getDefaultTransportLayer();
        });
    }
    SystemConnector.getDefaultTransportLayer = getDefaultTransportLayer;
    function tadirInterface(tadir) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.tadirInterface(tadir);
        });
    }
    SystemConnector.tadirInterface = tadirInterface;
    function dequeueTransport(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.dequeueTransport(trkorr);
        });
    }
    SystemConnector.dequeueTransport = dequeueTransport;
    function forwardTransport(trkorr, target, source, importAgain) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.forwardTransport(trkorr, target, source, importAgain);
        });
    }
    SystemConnector.forwardTransport = forwardTransport;
    function importTransport(trkorr, system) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.importTransport(trkorr, system);
        });
    }
    SystemConnector.importTransport = importTransport;
    function setInstallDevc(installDevc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.setInstallDevc(installDevc);
        });
    }
    SystemConnector.setInstallDevc = setInstallDevc;
    function getObjectsList() {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getObjectsList();
        });
    }
    SystemConnector.getObjectsList = getObjectsList;
    function renameTransportRequest(trkorr, as4text) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.renameTransportRequest(trkorr, as4text);
        });
    }
    SystemConnector.renameTransportRequest = renameTransportRequest;
    function setPackageIntegrity(integrity) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.setPackageIntegrity(integrity);
        });
    }
    SystemConnector.setPackageIntegrity = setPackageIntegrity;
    function addTranslationToTr(trkorr, devclassFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.addTranslationToTr(trkorr, devclassFilter);
        });
    }
    SystemConnector.addTranslationToTr = addTranslationToTr;
    function getFunctionModule(func) {
        return __awaiter(this, void 0, void 0, function* () {
            yield checkSystemConnector();
            return SystemConnector.systemConnector.getFunctionModule(func);
        });
    }
    SystemConnector.getFunctionModule = getFunctionModule;
})(SystemConnector || (exports.SystemConnector = SystemConnector = {}));
