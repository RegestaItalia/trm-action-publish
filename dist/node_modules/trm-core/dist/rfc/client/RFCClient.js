"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RFCClient = void 0;
const noderfc = __importStar(require("node-rfc"));
const commons_1 = require("../../commons");
class RFCClient {
    constructor(arg1, traceDir) {
        process.env["RFC_TRACE_DIR"] = traceDir || process.cwd();
        this._rfcClient = new noderfc.Client(arg1);
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._rfcClient.open();
        });
    }
    _call(fm, arg, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            var argNormalized;
            if (arg) {
                var emptyKeys = [];
                argNormalized = (0, commons_1.normalize)(arg, 'upper');
                Object.keys(argNormalized).forEach(key => {
                    if (argNormalized[key] === undefined || argNormalized === null) {
                        emptyKeys.push(key);
                    }
                });
                emptyKeys.forEach(key => {
                    delete argNormalized[key];
                });
            }
            else {
                argNormalized = {};
            }
            var callOptions = undefined;
            if (timeout) {
                callOptions = {
                    timeout
                };
            }
            const response = yield this._rfcClient.call(fm, argNormalized, callOptions);
            const responseNormalized = (0, commons_1.normalize)(response);
            return responseNormalized;
        });
    }
    readTable(tableName, fields, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var sqlOutput = [];
            const delimiter = '|';
            var aOptions = [];
            if (options) {
                aOptions = (options.match(/.{1,72}/g)).map(s => {
                    return {
                        text: s
                    };
                }) || [];
            }
            const result = yield this._call("RFC_READ_TABLE", {
                query_table: tableName.toUpperCase(),
                delimiter,
                options: aOptions,
                fields: fields
            });
            const data = result['data'];
            data.forEach(tab512 => {
                var sqlLine = {};
                const waSplit = tab512.wa.split(delimiter);
                fields.forEach((field, index) => {
                    sqlLine[field['FIELDNAME']] = waSplit[index].trim();
                });
                sqlOutput.push(sqlLine);
            });
            return (0, commons_1.normalize)(sqlOutput);
        });
    }
    getFileSystem() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_GET_FILE_SYS", {});
            return result['evFileSys'];
        });
    }
    getDirTrans() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_GET_DIR_TRANS", {});
            return result['evDirTrans'];
        });
    }
    getBinaryFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_GET_BINARY_FILE", {
                iv_file_path: filePath
            });
            return result['evFile'];
        });
    }
    writeBinaryFile(filePath, binary) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_WRITE_BINARY_FILE", {
                iv_file_path: filePath,
                iv_file: binary
            });
        });
    }
    createTocTransport(text, target) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_CREATE_TOC", {
                iv_text: text,
                iv_target: target.trim().toUpperCase()
            });
            return result['evTrkorr'];
        });
    }
    createWbTransport(text, target) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_CREATE_IMPORT_TR", {
                iv_text: text,
                iv_target: target
            });
            return result['evTrkorr'];
        });
    }
    setTransportDoc(trkorr, doc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_SET_TRANSPORT_DOC", {
                iv_trkorr: trkorr.trim().toUpperCase(),
                it_doc: doc
            });
        });
    }
    getDevclassObjects(devclass) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_GET_DEVCLASS_OBJS", {
                iv_devclass: devclass.trim().toUpperCase()
            });
            return result['etTadir'];
        });
    }
    addToTransportRequest(trkorr, content, lock) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_ADD_OBJS_TR", {
                iv_lock: lock ? 'X' : ' ',
                iv_trkorr: trkorr.trim().toUpperCase(),
                it_e071: content.map(o => {
                    return {
                        PGMID: o.pgmid,
                        OBJECT: o.object,
                        OBJ_NAME: o.objName
                    };
                })
            });
        });
    }
    repositoryEnvironment(objectType, objectName) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("REPOSITORY_ENVIRONMENT_RFC", {
                obj_type: objectType.trim().toUpperCase(),
                object_name: objectName.trim().toUpperCase()
            });
            return result['environmentTab'];
        });
    }
    deleteTrkorr(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_DELETE_TRANSPORT", {
                iv_trkorr: trkorr.trim().toUpperCase()
            });
        });
    }
    releaseTrkorr(trkorr, lock, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_RELEASE_TR", {
                iv_trkorr: trkorr.trim().toUpperCase(),
                iv_lock: lock ? 'X' : ' '
            }, timeout);
        });
    }
    addSkipTrkorr(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_ADD_SKIP_TRKORR", {
                iv_trkorr: trkorr.trim().toUpperCase()
            });
        });
    }
    addSrcTrkorr(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_ADD_SRC_TRKORR", {
                iv_trkorr: trkorr.trim().toUpperCase()
            });
        });
    }
    readTmsQueue(target) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_READ_TMS_QUEUE", {
                iv_target: target
            });
            return result['etRequests'];
        });
    }
    createPackage(scompkdtln) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_CREATE_PACKAGE", {
                is_data: scompkdtln
            });
        });
    }
    tdevcInterface(devclass, parentcl, rmParentCl) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_TDEVC_INTERFACE", {
                iv_devclass: devclass.trim().toUpperCase(),
                iv_parentcl: parentcl ? parentcl.trim().toUpperCase() : '',
                iv_rm_parentcl: rmParentCl ? 'X' : ' '
            });
        });
    }
    getDefaultTransportLayer() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_GET_TRANSPORT_LAYER");
            return result['evLayer'];
        });
    }
    tadirInterface(tadir) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_TADIR_INTERFACE", {
                iv_pgmid: tadir.pgmid,
                iv_object: tadir.object,
                iv_obj_name: tadir.objName,
                iv_devclass: tadir.devclass,
                iv_set_genflag: tadir.genflag ? 'X' : ' '
            });
        });
    }
    dequeueTransport(trkorr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_DEQUEUE_TR", {
                iv_trkorr: trkorr.trim().toUpperCase()
            });
        });
    }
    forwardTransport(trkorr, target, source, importAgain = true) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_FORWARD_TR", {
                iv_trkorr: trkorr.trim().toUpperCase(),
                iv_target: target.trim().toUpperCase(),
                iv_source: source.trim().toUpperCase(),
                iv_import_again: importAgain ? 'X' : ' '
            });
        });
    }
    importTransport(trkorr, system) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_IMPORT_TR", {
                iv_system: system.trim().toUpperCase(),
                iv_trkorr: trkorr.trim().toUpperCase()
            });
        });
    }
    setInstallDevc(installDevc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_SET_INSTALL_DEVC", {
                it_installdevc: installDevc
            });
        });
    }
    getObjectsList() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_LIST_OBJECT_TYPES");
            return result['etObjectText'];
        });
    }
    getTrmServerVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_VERSION");
            return result['evVersion'];
        });
    }
    trmServerPing() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._call("ZTRM_PING");
            return result['evReturn'];
        });
    }
    renameTransportRequest(trkorr, as4text) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_RENAME_TRANSPORT_REQUEST", {
                iv_trkorr: trkorr.trim().toUpperCase(),
                iv_as4text: as4text
            });
        });
    }
    setPackageIntegrity(integrity) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._call("ZTRM_SET_INTEGRITY", {
                is_integrity: integrity
            });
        });
    }
}
exports.RFCClient = RFCClient;
