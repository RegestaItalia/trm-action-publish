"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrmArtifact = void 0;
const manifest_1 = require("../manifest");
const AdmZip = __importStar(require("adm-zip"));
const node_r3trans_1 = require("node-r3trans");
const DIST_FOLDER = 'dist';
class TrmArtifact {
    constructor(binary, _distFolder, _manifest) {
        this.binary = binary;
        this._distFolder = _distFolder;
        this._manifest = _manifest;
        this._zip = new AdmZip.default(binary);
    }
    getManifest() {
        if (this._manifest === undefined) {
            const zipEntries = this._zip.getEntries();
            const manifestEntry = zipEntries.find(o => o.entryName.trim().toLowerCase() === 'manifest.json');
            if (!manifestEntry) {
                this._manifest = null;
            }
            else {
                this._manifest = manifest_1.Manifest.fromJson(manifestEntry.getData().toString());
            }
        }
        return this._manifest;
    }
    replaceManifest(oManifest) {
        const manifestBuffer = Buffer.from(JSON.stringify(oManifest.get(false), null, 2), 'utf8');
        this._zip.updateFile('manifest.json', manifestBuffer);
    }
    getDistFolder() {
        var _a;
        if (!this._distFolder) {
            this._distFolder = (_a = this.getManifest()) === null || _a === void 0 ? void 0 : _a.get().distFolder;
        }
        return this._distFolder;
    }
    getTransportBinaries(tmpFolder) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const distFolder = this.getDistFolder();
            if (!distFolder) {
                throw new Error(`Couldn't locate dist folder.`);
            }
            const zipEntries = this._zip.getEntries();
            const aTransportEntries = zipEntries.filter(o => o.entryName.trim().toLowerCase().startsWith(`${distFolder}/`));
            var aResult = [];
            const r3trans = new node_r3trans_1.R3trans({
                tempDirPath: tmpFolder
            });
            for (const entry of aTransportEntries) {
                try {
                    const type = entry.comment;
                    const oPackedTransport = new AdmZip.default(entry.getData());
                    const aPackedTransportEntries = oPackedTransport.getEntries();
                    const oHeader = (_a = aPackedTransportEntries.find(o => o.comment === 'header')) === null || _a === void 0 ? void 0 : _a.getData();
                    const oData = (_b = aPackedTransportEntries.find(o => o.comment === 'data')) === null || _b === void 0 ? void 0 : _b.getData();
                    if (oHeader && oData) {
                        const trkorr = yield r3trans.getTransportTrkorr(oData);
                        aResult.push({
                            trkorr,
                            type,
                            binaries: {
                                header: oHeader,
                                data: oData
                            }
                        });
                    }
                }
                catch (e) { }
            }
            ;
            return aResult;
        });
    }
    static create(transports, manifest, skipLog = false, distFolder = DIST_FOLDER) {
        return __awaiter(this, void 0, void 0, function* () {
            const artifact = new AdmZip.default();
            artifact.addZipComment(`TRM Package`);
            var binaries = [];
            var packedTransports = [];
            for (const transport of transports) {
                const trBinary = yield transport.download(skipLog);
                binaries.push({
                    trkorr: transport.trkorr,
                    type: transport.trmIdentifier,
                    binaries: trBinary.binaries,
                    filenames: trBinary.filenames
                });
            }
            for (const bin of binaries) {
                const packedTransport = new AdmZip.default();
                packedTransport.addZipComment(`Transport request: ${bin.trkorr}\nContent type: ${bin.type || 'Unknown'}`);
                packedTransport.addFile(bin.filenames.header, bin.binaries.header, "header");
                packedTransport.addFile(bin.filenames.data, bin.binaries.data, "data");
                packedTransports.push({
                    filename: bin.trkorr,
                    binary: packedTransport.toBuffer(),
                    comment: bin.type ? bin.type : ''
                });
            }
            for (const file of packedTransports) {
                artifact.addFile(`${distFolder}/${file.filename}`, file.binary, file.comment);
            }
            manifest.setDistFolder(distFolder);
            const manifestBuffer = Buffer.from(JSON.stringify(manifest.get(false), null, 2), 'utf8');
            artifact.addFile(`manifest.json`, manifestBuffer, `manifest`);
            return new TrmArtifact(artifact.toBuffer(), distFolder, manifest);
        });
    }
}
exports.TrmArtifact = TrmArtifact;
