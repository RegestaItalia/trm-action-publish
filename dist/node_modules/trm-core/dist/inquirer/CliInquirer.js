"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliInquirer = void 0;
const logger_1 = require("../logger");
const cliInquirer = __importStar(require("@inquirer/prompts"));
class CliInquirer {
    constructor() { }
    prompt(arg1) {
        return __awaiter(this, void 0, void 0, function* () {
            if (logger_1.Logger.logger instanceof logger_1.CliLogger || logger_1.Logger.logger instanceof logger_1.CliLogFileLogger) {
                logger_1.Logger.logger.forceStop();
            }
            var aQuestions;
            var hash = {};
            if (!Array.isArray(arg1)) {
                aQuestions = [arg1];
            }
            else {
                aQuestions = arg1;
            }
            for (var question of aQuestions) {
                if (question.type === 'list') {
                    question.type = 'select';
                }
                if (cliInquirer[question.type]) {
                    var prompt;
                    if (question.when === undefined) {
                        prompt = true;
                    }
                    else if (typeof (question.when) === 'boolean') {
                        prompt = question.when;
                    }
                    else {
                        prompt = yield question.when(hash);
                    }
                    if (prompt) {
                        const oResponse = yield cliInquirer[question.type](question);
                        hash[question.name] = oResponse;
                    }
                }
                else {
                    throw new Error(`Unknown CLI inquirer type "${question.type}".`);
                }
            }
            return hash;
        });
    }
}
exports.CliInquirer = CliInquirer;
