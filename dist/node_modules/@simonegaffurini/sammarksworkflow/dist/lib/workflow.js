"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.WorkflowRevertError = exports.WorkflowError = void 0;
var debug_1 = require("debug");
var debug = debug_1.default('workflow');
/** A wrapper around the error class, thrown when an error occurs in the workflow. */
var WorkflowError = /** @class */ (function (_super) {
    __extends(WorkflowError, _super);
    function WorkflowError(stepName, originalException) {
        var _this = _super.call(this, "Workflow error executing '" + stepName + "': " + originalException) /* istanbul ignore next */ || this;
        _this.stepName = stepName;
        _this.originalException = originalException;
        return _this;
    }
    return WorkflowError;
}(Error));
exports.WorkflowError = WorkflowError;
/** A wrapper around the workflow error class, thrown when an error occurs during the revert phase of a workflow. */
var WorkflowRevertError = /** @class */ (function (_super) {
    __extends(WorkflowRevertError, _super);
    function WorkflowRevertError(stepName, error, originalWorkflowError) {
        var _this = _super.call(this, stepName, error) /* istanbul ignore next */ || this;
        _this.originalWorkflowError = originalWorkflowError;
        _this.message = "Workflow error executing '" + originalWorkflowError.stepName + "': " + originalWorkflowError.originalException + "\nAdditionally, error reverting step '" + stepName + "': " + error;
        return _this;
    }
    return WorkflowRevertError;
}(WorkflowError));
exports.WorkflowRevertError = WorkflowRevertError;
/**
 * Executes a workflow.
 * @param name - the name of the workflow to execute
 * @param steps - an array of steps used to define the workflow
 * @param context - the default context to pass to all steps
 * @returns a promise resolving to the final context
 */
var execute = function (name, steps, context) { return __awaiter(void 0, void 0, void 0, function () {
    var revertSteps, i, step, _a, e_1, workflowError, err_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                revertSteps = [];
                debug("Starting workflow: '" + name + "'");
                i = 0;
                _b.label = 1;
            case 1:
                if (!(i < steps.length)) return [3 /*break*/, 12];
                step = steps[i];
                _a = step.filter;
                if (!_a) return [3 /*break*/, 3];
                return [4 /*yield*/, step.filter(context)];
            case 2:
                _a = !(_b.sent());
                _b.label = 3;
            case 3:
                // Skip the step if the filter reports it should not be run.
                if (_a)
                    return [3 /*break*/, 11];
                if (step.revert)
                    revertSteps.push({ name: step.name, run: step.revert });
                _b.label = 4;
            case 4:
                _b.trys.push([4, 6, , 11]);
                debug("- Step: " + step.name);
                return [4 /*yield*/, step.run(context)];
            case 5:
                _b.sent();
                return [3 /*break*/, 11];
            case 6:
                e_1 = _b.sent();
                debug(" Failed.");
                debug(e_1);
                workflowError = new WorkflowError(step.name, e_1);
                _b.label = 7;
            case 7:
                _b.trys.push([7, 9, , 10]);
                return [4 /*yield*/, exports.execute(name + " (revert)", revertSteps, context)];
            case 8:
                _b.sent();
                return [3 /*break*/, 10];
            case 9:
                err_1 = _b.sent();
                throw new WorkflowRevertError(err_1.stepName, err_1.originalException, workflowError);
            case 10: throw workflowError;
            case 11:
                i++;
                return [3 /*break*/, 1];
            case 12:
                debug('Complete');
                return [2 /*return*/, context];
        }
    });
}); };
exports.execute = execute;
exports.default = exports.execute;
//# sourceMappingURL=workflow.js.map